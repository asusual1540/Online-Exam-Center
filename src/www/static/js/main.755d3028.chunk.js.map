{"version":3,"sources":["logo-oec.svg","history.js","components/Navbar.jsx","components/common/InputField.jsx","config.js","http/http.js","context/auth-context.js","components/EnterExamForm.jsx","components/TeacherOrAdmin.jsx","components/Container.jsx","components/Admin/loginForm.jsx","http/web_socket.js","components/ExamRoom/QuestionPaper.jsx","components/common/SmallToogle.jsx","components/common/Backdrop.jsx","components/ExamRoom/ExamRoom.jsx","components/ExamRoom/Clock.jsx","components/ExamRoom/Timer.jsx","components/ExamRoom/StudentExamRoom.jsx","components/Teacher/Sidenav.jsx","components/common/Tabs.jsx","components/common/Panel.jsx","components/common/SwitchToogle.jsx","components/common/Select.jsx","components/Teacher/Exam/ExamDetails.jsx","http/image_uploader.js","components/Teacher/Exam/Question.jsx","components/common/Uploader.jsx","components/Teacher/Exam/StudentForm.jsx","components/Teacher/Exam/StudentTable.jsx","components/Teacher/Exam/StudentControls.jsx","components/Teacher/Exam/MyStudents.jsx","components/Teacher/Exam/Result.jsx","components/Teacher/Exam/MyExam.jsx","components/Teacher/ChangePassword.jsx","components/Teacher/Teacher.jsx","components/Teacher/loginForm.jsx","components/Admin/MyTeachers.jsx","components/Admin/ChangePassword.jsx","components/Admin/Sidenav.jsx","components/Admin/Admin.jsx","App.js","serviceWorker.js","index.js","delete.svg","edit.svg","print.svg"],"names":["module","exports","customHistory","createBrowserHistory","Navbar","className","to","style","textDecoration","src","logo","alt","InputField","name","label","value","onChange","type","error","htmlFor","id","httpUrl","callServer","query","token","callback","jwt","decode","exp","Date","now","localStorage","clear","toast","info","history","replace","fetch","method","body","JSON","stringify","headers","Authorization","then","res","status","json","result","catch","err","React","createContext","tokenExpiration","userID","accessType","username","login","tokenExpirationken","logout","exam_id","setExam","EnterExamForm","state","data","studentID","studentPassword","examCode","examPassword","handleChange","input","currentTarget","setState","handleSubmit","e","preventDefault","studentLogin","decoded","setItem","context","props","push","success","ex","errors","message","this","onSubmit","Component","contextType","AuthContext","withRouter","TeacherOrAdmin","Container","LoginForm","account","password","isLogin","handleClearState","adminLogin","resData","adminID","onClick","client","SubscriptionClient","reconnect","timeout","lazy","connectionParams","getItem","callSocketServer","cb","subscription","request","subscribe","next","QuestionPaper","questions","map","q","i","key","text","options","option","k","image","mark","SmallToogle","Fragment","title","checked","Backdrop","ExamRoom","exam","_id","code","totalMarks","examDate","totalTimeInMin","courseTitle","courseCode","semester","year","students","loggedInStudents","restrictedStudents","temporaryRestrictedStudents","submittedStudents","liveStudents","teacher","deptCode","question","angryMode","choice","student","permission","submission","activeStatus","tempStatus","permanentStatus","handleExit","handleStopExam","teacherID","examID","stopExam","handleTooglePermission","s","restrictStudentByID","permitStudentByID","found","find","element","td","temporaryRestrictedStudentIDs","includes","target","pop","handleToogleSubmission","handleClose","handleRadioChange","Number","handleAnger","temporaryRestrictStudentByID","restrictAndSubmitStudentByID","permanentRestrictStudentByID","console","log","get_exam_by_id","newExam","loggedInStudentIDs","restrictedStudentIDs","submittedStudentIDs","studentLoggedIn","studentLoggedOut","studentQuitWithoutSubmit","StudentWhoLoggedIn","currentStudent","length","StudentWhoLoggedOut","split","dueDate","dueTime","moment","format","day","date","time","today","event","Clock","seconds","minutes","Math","floor","toString","Timer","count","running","handleStart","prevProps","prevState","handleStop","timer","setInterval","newCount","clearInterval","StudentExamRoom","duration","option_one","option_two","option_three","option_four","q_answer","answer","answers","questionIndex","studentAnswer","handleLogout","logoutStudent","quitExam","student_id","q_index","index","writeAnswer","getAnswer","permanentStudentRestrict","temporaryStudentRestrict","onExamStop","unsubscribe","newAnswers","question_data","a","j","examDuration","Sidenav","Consumer","exact","activeClassName","Tabs","selected","children","elem","handleTabInputChange","Panel","SwitchToogle","Select","ExamDetails","addMode","editMode","options_semester","options_year","onInputChange","handleAddExam","toogleCheckBox","handleAdd","clearState","raiseHandleEdit","t","handleExamEdit","raiseClearState","raiseHandleUpdate","handleUpdate","prevPassword","newPassword","handleSemesterChange","handleYearChange","exams","course","handleToogleCheckBoxExam","handleStudent","handleQuestion","enterOngoingExam","handleStartExam","handleResult","editIcon","handleDeleteExam","deleteIcon","callUploadServer","question_id","question_no","form_data","Question","authenticated","updateMode","selectedFile","handleQuestionAdd","newQuestion","handleQuestionDelete","splice","newArrayOfQuestions","answer_1","answer_2","answer_3","answer_4","addQuestion","sum","handleImageUpload","files","onClickHandler","FormData","append","qs","get_question_by_exam","existingQuestions","rt_ans","o","height","scrollHeight","rows","onKeyDown","handleKeyDown","placeholder","spellCheck","Uploader","SheetJSFT","x","join","handleFile","reader","FileReader","rABS","readAsBinaryString","onload","bstr","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","extractData","file","readAsArrayBuffer","accept","uploadHandler","marginLeft","marginRight","cancelUpload","StudentForm","uploadMode","raiseClose","raiseUpdate","raiseSubmit","raiseChange","raiseUpload","raiseCancelUpload","dataExtractor","selectedFileName","StudentTable","ref","el","componentRef","trigger","printIcon","content","countActiveStudents","handleToogleCheckBox","handleSubmitStatus","submitStatus","raiseEdit","raiseDelete","StudentControls","handleBackToExam","handleFileUpload","handleAssignStudents","handleGoToQuestion","MyStudents","assignedStudents","dataChanged","handleUpload","Array","from","handleEdit","mode","handleCancelUpdate","handleDelete","filter","c","removeStudent","trim","addStudent","unshift","updateStudent","activeStudents","studentIDs","assign_students_to_exam","refresh_exams","obj","generateRandomNumber","newStudents","random","newMappedStudents","addMultipleStudent","get_all_students","get_assigned_student","allStudents","Result","myMarks","answer_view_mode","selected_student","handleViewResult","sss","stdArray","get_answer_by_students","full_answers","ans","MyExam","examMode","switchToQuestion","switchToStudents","switchToResult","switchToExams","reresh_exams","ChangePassword","confirmNewPassword","updated","changeTeacherPassword","Teacher","filteredExams","submittedStudent","get_exams","get_all_exams","newExams","addExam","updateExam","removeExam","changeExamStatus","path","component","render","teacherLogin","MyTeachers","teachers","dept","newTeachers","newMappedTeachers","addMultipleTeacher","addTeacher","removeTeacher","handleSaveNewTeachers","updateTeacher","handleStatusChange","updateTeacherStatus","get_all_teachers","admin","changeAdminPassword","Error","Admin","App","TeacherRoute","rest","Provider","autoClose","AdminLoginForm","TeacherLoginForm","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.755d3028.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-oec.1152fc83.svg\";","import { createBrowserHistory } from 'history'\r\n\r\nconst customHistory = createBrowserHistory()\r\nexport default customHistory;","import React from \"react\"\r\nimport logo from \"../logo-oec.svg\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"main-nav\">\r\n      <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n        <div className=\"logo-box\">\r\n          <img src={logo} alt=\"logo\" className=\"logo-icon\" />\r\n          <h2 className=\"logo-text\">Online Exam Center</h2>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React from \"react\";\r\n\r\nconst InputField = ({ name, label, value, onChange, type, error }) => {\r\n  return (\r\n    <div>\r\n      <label className={type === \"checkbox\" ? \"form-label-checkbox\" : \"form-label\"} htmlFor={name}>\r\n        {label}\r\n      </label>\r\n      {type !== \"checkbox\" && <br />}\r\n      <input\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={type === \"checkbox\" ? \"form-input-checkbox\" : \"form-input\"}\r\n        id={name}\r\n        type={type}\r\n      />\r\n      {error && <div className=\"input-error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","export const production = true\r\n\r\nexport const websocketUrl = production ? 'ws://146.148.111.54' : 'ws://localhost:8000'\r\nexport const httpUrl = production ? 'http://146.148.111.54' : 'http://localhost:8000'","import { toast } from \"react-toastify\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport history from \"../history\"\r\nimport { httpUrl } from '../config'\r\nfunction callServer(query, token, callback) {\r\n  if (token) {\r\n    const { exp: tokenExpiration } = jwt.decode(token)\r\n    if (tokenExpiration < Date.now() / 1000) {\r\n      localStorage.clear()\r\n      toast.info(\"Token Expired. Please login again...\")\r\n      history.replace(\"/\")\r\n      return\r\n    }\r\n  }\r\n  //https://murmuring-brushlands-59860.herokuapp.com/\r\n  fetch(httpUrl, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(query),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      'Accept': 'application/json',\r\n      Authorization: \"Bearer \" + token\r\n    }\r\n  })\r\n    .then(res => {\r\n      if (res.status !== 200 && res.status !== 201) {\r\n        return\r\n      }\r\n      return res.json()\r\n    })\r\n    .then(result => {\r\n      callback(result)\r\n    })\r\n    .catch(err => {\r\n      return err\r\n    })\r\n}\r\n\r\nexport default callServer\r\n","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    token: null,\r\n    tokenExpiration: null,\r\n    userID: null,\r\n    accessType: null,\r\n    username: null,\r\n    login: (token, userID, username, accessType, tokenExpirationken) => { },\r\n    logout: () => { },\r\n    exam_id: null,\r\n    setExam: (exam_id) => { }\r\n})\r\n","import React, { Component } from \"react\"\r\nimport { withRouter } from \"react-router-dom\"\r\nimport { toast } from \"react-toastify\"\r\nimport jwt from \"jsonwebtoken\"\r\n\r\nimport Input from \"./common/InputField\"\r\nimport callServer from \"../http/http\"\r\nimport AuthContext from \"../context/auth-context\"\r\n\r\nclass EnterExamForm extends Component {\r\n  state = {\r\n    data: { studentID: \"\", studentPassword: \"\", examCode: \"\", examPassword: \"\" }\r\n  }\r\n  static contextType = AuthContext\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const data = { ...this.state.data }\r\n    data[input.name] = input.value\r\n    this.setState({ data })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    const {\r\n      examCode,\r\n      examPassword,\r\n      studentID,\r\n      studentPassword\r\n    } = this.state.data\r\n\r\n    const studentLogin = {\r\n      query: `\r\n        query {\r\n          studentLogin (examCode: \"${examCode}\", examPassword: \"${examPassword}\", studentID: \"${studentID}\", studentPassword : \"${studentPassword}\") {\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n    const token = \"\"\r\n    callServer(studentLogin, token, result => {\r\n      try {\r\n        let { token } = result.data.studentLogin\r\n        if (token) {\r\n          const decoded = jwt.decode(token)\r\n          const {\r\n            studentID: userID,\r\n            name: username,\r\n            exam_id,\r\n            accessType,\r\n            exp: tokenExpiration\r\n          } = decoded\r\n          localStorage.setItem(\"token\", token)\r\n          localStorage.setItem(\"userID\", userID)\r\n          localStorage.setItem(\"username\", username)\r\n          localStorage.setItem(\"exam_id\", exam_id)\r\n          localStorage.setItem(\"accessType\", accessType)\r\n          localStorage.setItem(\"tokenExpiration\", tokenExpiration)\r\n          this.context.setExam(exam_id)\r\n          this.context.login(\r\n            token,\r\n            userID,\r\n            username,\r\n            accessType,\r\n            tokenExpiration\r\n          )\r\n          this.props.history.push(\"/api/StudentExamRoom\")\r\n          toast.success(\"Successfully logged in\")\r\n        }\r\n      } catch (ex) {\r\n        this.props.history.push(\"/\")\r\n        toast.error(`${result.errors[0].message}`)\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n\r\n    return (\r\n      <div className=\"student-exam-form \">\r\n        <h2>Enter Exam</h2>\r\n        <form onSubmit={this.handleSubmit} className=\"form\">\r\n          <Input\r\n            name=\"examCode\"\r\n            value={data.examCode}\r\n            label=\"Exam Code\"\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n          />\r\n          <Input\r\n            name=\"examPassword\"\r\n            value={data.examPassword}\r\n            label=\"Exam Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <Input\r\n            name=\"studentID\"\r\n            value={data.studentID}\r\n            label=\"Student ID\"\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n          />\r\n          <Input\r\n            name=\"studentPassword\"\r\n            value={data.studentPassword}\r\n            label=\"Student Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <button type=\"submit\" className=\"form-button\">\r\n            Enter\r\n          </button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(EnterExamForm)\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass TeacherOrAdmin extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"teacher-or-admin\">\r\n        <div className=\"wrapper\">\r\n          <Link to=\"/api/adminLogin\">\r\n            <button className=\"button-general\">Login as Admin</button>\r\n          </Link>\r\n          <Link to=\"/api/teacherLogin\">\r\n            <button className=\"button-general\">Login as Teacher</button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TeacherOrAdmin;\r\n","import React, { Component } from \"react\"\r\nimport { withRouter } from \"react-router-dom\"\r\nimport EnterExamForm from \"./EnterExamForm\"\r\nimport TeacherOrAdmin from \"./TeacherOrAdmin\"\r\n\r\nclass Container extends Component {\r\n  state = {}\r\n  render() {\r\n    return (\r\n      <div className=\"all-container\">\r\n        <EnterExamForm />\r\n        <TeacherOrAdmin />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(Container)\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport { toast } from \"react-toastify\"\r\nimport Input from \"../common/InputField\"\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport callServer from \"../../http/http\"\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    account: { username: \"\", password: \"\" },\r\n    isLogin: true\r\n  }\r\n\r\n  static contextType = AuthContext\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const account = { ...this.state.account }\r\n    account[input.name] = input.value\r\n    this.setState({ account })\r\n  }\r\n\r\n  handleClearState = e => {\r\n    e.preventDefault()\r\n    const account = { ...this.state.account }\r\n    account[\"username\"] = \"\"\r\n    account[\"password\"] = \"\"\r\n    this.setState({ account })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    const account = { ...this.state.account }\r\n    let username = account.username\r\n    let password = account.password\r\n\r\n    const adminLogin = {\r\n      query: `\r\n        query {\r\n          adminLogin (name: \"${username}\", password: \"${password}\") {\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n    const token = \"\"\r\n    callServer(adminLogin, token, resData => {\r\n      try {\r\n        let { token } = resData.data.adminLogin\r\n        if (token) {\r\n          localStorage.setItem(\"token\", token)\r\n          const decoded = jwt.decode(token)\r\n          const {\r\n            adminID: userID,\r\n            name: username,\r\n            accessType,\r\n            exp: tokenExpiration\r\n          } = decoded\r\n          localStorage.setItem(\"userID\", userID)\r\n          localStorage.setItem(\"username\", username)\r\n          localStorage.setItem(\"accessType\", accessType)\r\n          localStorage.setItem(\"tokenExpiration\", tokenExpiration)\r\n          this.context.login(\r\n            token,\r\n            userID,\r\n            username,\r\n            accessType,\r\n            tokenExpiration\r\n          )\r\n          this.props.history.push(\"/api/admin/myTeachers\")\r\n        }\r\n      } catch (ex) {\r\n        toast.error(\"Invalid Credentials\")\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { account } = this.state\r\n\r\n    return (\r\n      <div className=\"login_form\">\r\n        <h2>Admin's Login</h2>\r\n        <form onSubmit={this.handleSubmit} className=\"form-control\">\r\n          <Input\r\n            name=\"username\"\r\n            value={account.username}\r\n            label=\"Username\"\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n          />\r\n          <Input\r\n            name=\"password\"\r\n            value={account.password}\r\n            label=\"Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <div className=\"form-button-group\">\r\n            <button type=\"submit\" className=\"form-button\">\r\n              Login\r\n            </button>\r\n            <button className=\"form-button\" onClick={this.handleClearState}>\r\n              Clear\r\n            </button>\r\n            <Link to=\"/\">\r\n              <button className=\"form-button\">Back</button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm\r\n","import { SubscriptionClient } from 'graphql-subscriptions-client';\r\nimport { websocketUrl } from '../config'\r\n\r\nconst GRAPHQL_ENDPOINT = websocketUrl\r\nconst client = new SubscriptionClient(GRAPHQL_ENDPOINT, {\r\n    reconnect: true,\r\n    timeout: 30000,\r\n    lazy: true,\r\n    connectionParams: {\r\n        headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\r\n        }\r\n    }\r\n});\r\nfunction callSocketServer(query, cb) {\r\n    const subscription = client.request({ query })\r\n        .subscribe({\r\n            next({ data }) {\r\n                if (data) {\r\n                    cb(data, subscription)\r\n                }\r\n            }\r\n        })\r\n}\r\nexport default callSocketServer\r\n","import React, { Component } from 'react';\r\n\r\nimport \"./questionPaper.css\"\r\n\r\nclass QuestionPaper extends Component {\r\n    state = {}\r\n    render() {\r\n        const questions = this.props.questions || []\r\n        return (\r\n            <div className=\"qp-container\">\r\n                <div className=\"qp-header\">\r\n                    <div className=\"qp-header-text\">\r\n                        Question\r\n                    </div>\r\n                </div>\r\n                <div className=\"qp-body\">\r\n                    {questions.map((q, i) => (\r\n                        <div key={i} className=\"qp-single\">\r\n                            <div className=\"qp-serial\">\r\n                                <h3>{q.id}.</h3>\r\n                            </div>\r\n                            <div className=\"qp-data\">\r\n                                <div className=\"qp-data-title\">\r\n                                    <h3>{q.text}</h3>\r\n                                </div>\r\n                                <div className=\"qp-data-box\">\r\n                                    <div className=\"qp-data-options\">\r\n                                        {q.options.map((option, k) => (\r\n                                            <div key={k} className=\"qp-data-option\">\r\n                                                <div className=\"qp-data-option-no\">\r\n                                                    <h3>{option.id}.</h3>\r\n                                                </div>\r\n                                                <div className=\"qp-data-option-text\">\r\n                                                    <h3>{option.text}</h3>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                    <div className=\"qp-data-image\">\r\n                                        <img src={q.image} alt=\"\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"qp-mark\">\r\n                                <h3>{q.mark}</h3>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuestionPaper;","import React from 'react';\r\nimport \"./smallToogle.css\"\r\n\r\nconst SmallToogle = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className=\"sm-checkbox-label\">{props.title}</h3>\r\n            <label className=\"sm-switch\">\r\n                <input type=\"checkbox\" onChange={props.onChange} checked={props.status ? true : false} />\r\n                <span className=\"sm-slider round\"></span>\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default SmallToogle;","import React from 'react';\r\nimport \"./backdrop.css\"\r\nconst Backdrop = () => {\r\n    return (<div className=\"backdrop\"></div>);\r\n}\r\n\r\nexport default Backdrop;","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\nimport moment from \"moment\"\r\n\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport callServer from \"../../http/http\"\r\nimport callSocketServer from \"../../http/web_socket\"\r\nimport QuestionPaper from \"./QuestionPaper\"\r\nimport SmallToogle from \"../common/SmallToogle\"\r\nimport Backdrop from \"../common/Backdrop\"\r\nimport \"./examRoom.css\"\r\n\r\nclass ExamRoom extends Component {\r\n  state = {\r\n    exam: {\r\n      _id: \"\",\r\n      title: \"\",\r\n      code: \"\",\r\n      totalMarks: 0,\r\n      examDate: \"\",\r\n      totalTimeInMin: 0,\r\n      status: false,\r\n      courseTitle: \"\",\r\n      courseCode: \"\",\r\n      semester: \"\",\r\n      year: 0\r\n    },\r\n    students: [],\r\n    loggedInStudents: [],\r\n    restrictedStudents: [],\r\n    temporaryRestrictedStudents: [],\r\n    submittedStudents: [],\r\n    liveStudents: [],\r\n    teacher: {\r\n      _id: \"\",\r\n      name: \"\",\r\n      deptCode: \"\"\r\n    },\r\n    question: {},\r\n    angryMode: false,\r\n    choice: 1,\r\n    student: {\r\n      _id: \"\",\r\n      name: \"\",\r\n      studentID: \"\",\r\n      permission: true,\r\n      submission: false,\r\n      activeStatus: false,\r\n      tempStatus: false,\r\n      permanentStatus: false\r\n    }\r\n  }\r\n  static contextType = AuthContext\r\n\r\n  componentDidMount() {\r\n    const examID = localStorage.getItem(\"exam_id\")\r\n    const token = this.context.token\r\n    const get_exam_by_id = {\r\n      query: `\r\n      query {\r\n        get_exam_by_id(examID: \"${examID}\"){\r\n          title\r\n          code\r\n          password\r\n          totalMarks\r\n          examDate\r\n          totalTimeInMin\r\n          status\r\n          date\r\n          course {\r\n            title\r\n            code\r\n          }\r\n          year\r\n          semester\r\n          teacher{\r\n            _id\r\n            name\r\n            deptCode\r\n          }\r\n          students {\r\n            _id\r\n            name\r\n            studentID\r\n          }\r\n          loggedInStudents {\r\n            _id\r\n            name\r\n            studentID\r\n          }\r\n          restrictedStudents {\r\n            _id\r\n            name\r\n            studentID\r\n          }\r\n          temporaryRestrictedStudents {\r\n            _id\r\n            name\r\n            studentID\r\n          }\r\n          submittedStudents {\r\n            _id\r\n            name\r\n            studentID\r\n          }\r\n          question {\r\n            _id\r\n            questions {\r\n              id\r\n              text\r\n              mark\r\n              image\r\n              options {\r\n                id\r\n                text\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      `\r\n    }\r\n    callServer(get_exam_by_id, token, result => {\r\n      if (!result.data) {\r\n        toast.error(\"Can not get data\")\r\n      }\r\n      const newExam = result.data.get_exam_by_id\r\n      const loggedInStudentIDs = newExam.loggedInStudents.map(s => s._id)\r\n      const restrictedStudentIDs = newExam.restrictedStudents.map(s => s._id)\r\n      const temporaryRestrictedStudentIDs = newExam.temporaryRestrictedStudents.map(s => s._id)\r\n      const submittedStudentIDs = newExam.submittedStudents.map(s => s._id)\r\n      let students = []\r\n      students = newExam.students.map(s => {\r\n        return {\r\n          _id: s._id,\r\n          name: s.name,\r\n          studentID: s.studentID,\r\n          permission: restrictedStudentIDs.includes(s._id)\r\n            || submittedStudentIDs.includes(s._id)\r\n            || temporaryRestrictedStudentIDs.includes(s._id) ? false : true,\r\n          submission: submittedStudentIDs.includes(s._id) ? true : false,\r\n          activeStatus: loggedInStudentIDs.includes(s._id) ? true : false,\r\n          tempStatus: temporaryRestrictedStudentIDs.includes(s._id) ? true : false,\r\n          permanentStatus: restrictedStudentIDs.includes(s._id) ? true : false\r\n        }\r\n      })\r\n      this.setState({\r\n        exam: {\r\n          _id: newExam[\"_id\"],\r\n          title: newExam[\"title\"],\r\n          code: newExam[\"code\"],\r\n          totalMarks: newExam[\"totalMarks\"],\r\n          examDate: newExam[\"examDate\"],\r\n          totalTimeInMin: newExam[\"totalTimeInMin\"],\r\n          status: newExam[\"status\"],\r\n          courseTitle: newExam[\"course\"][\"title\"],\r\n          courseCode: newExam[\"course\"][\"code\"],\r\n          semester: newExam[\"semester\"],\r\n          year: newExam[\"year\"]\r\n        },\r\n        students: students || [],\r\n        loggedInStudents: newExam.loggedInStudents || [],\r\n        restrictedStudents: newExam.restrictedStudents || [],\r\n        temporaryRestrictedStudents: newExam.temporaryRestrictedStudents || [],\r\n        submittedStudents: newExam.submittedStudents || [],\r\n        teacher: newExam.teacher || {},\r\n        question: newExam.question || {}\r\n      })\r\n    })\r\n    const exam_id = this.context.exam_id\r\n    const studentLoggedIn = `\r\n    subscription {\r\n      studentLoggedIn (exam_id : \"${exam_id}\"){\r\n        _id\r\n        name\r\n        studentID\r\n        status\r\n      }\r\n    }\r\n      `\r\n    const studentLoggedOut = `\r\n    subscription {\r\n      studentLoggedOut (exam_id : \"${exam_id}\"){\r\n        _id\r\n        name\r\n        studentID\r\n        status\r\n      }\r\n    }\r\n      `\r\n    const studentQuitWithoutSubmit = `\r\n    subscription {\r\n      studentQuitWithoutSubmit (exam_id : \"${exam_id}\"){\r\n        _id\r\n        name\r\n        studentID\r\n        status\r\n      }\r\n    }\r\n      `\r\n\r\n    callSocketServer(studentLoggedIn, (data, subscription) => {\r\n      console.log(data[\"studentLoggedIn\"])\r\n      const StudentWhoLoggedIn = data[\"studentLoggedIn\"]\r\n      const students = this.state.students\r\n      let currentStudent = {}\r\n      for (let i = 0; i < students.length; i++) {\r\n        if (students[i][\"_id\"] === StudentWhoLoggedIn[\"_id\"]) {\r\n          students[i].activeStatus = true\r\n          currentStudent = { ...students[i] }\r\n        }\r\n      }\r\n      toast.info(`${currentStudent.name} just Logged in.`)\r\n      this.setState({ students })\r\n    })\r\n    callSocketServer(studentLoggedOut, (data, subscription) => {\r\n      console.log(data[\"studentLoggedOut\"])\r\n      const StudentWhoLoggedOut = data[\"studentLoggedOut\"]\r\n      const students = this.state.students\r\n      for (let i = 0; i < students.length; i++) {\r\n        if (students[i][\"_id\"] === StudentWhoLoggedOut[\"_id\"]) {\r\n          students[i].activeStatus = false\r\n          students[i].submission = true\r\n          students[i].permission = false\r\n        }\r\n      }\r\n      this.setState({ students })\r\n    })\r\n    callSocketServer(studentQuitWithoutSubmit, (data, subscription) => {\r\n      const StudentWhoLoggedOut = data[\"studentQuitWithoutSubmit\"]\r\n      const students = this.state.students\r\n      let currentStudent = {}\r\n      for (let i = 0; i < students.length; i++) {\r\n        if (students[i][\"_id\"] === StudentWhoLoggedOut[\"_id\"]) {\r\n          students[i].activeStatus = false\r\n          students[i].submission = false\r\n          students[i].permission = false\r\n          currentStudent = { ...students[i] }\r\n        }\r\n      }\r\n      toast.info(`${currentStudent.name} just Quit without submitting`)\r\n      this.setState({ students })\r\n    })\r\n  }\r\n\r\n\r\n\r\n  handleExit = () => {\r\n    this.props.history.push(\"/api/teacher/myExam\")\r\n  }\r\n  handleStopExam = () => {\r\n    const teacherID = this.context.userID\r\n    const examID = this.context.exam_id\r\n    const token = this.context.token\r\n    const stopExam = {\r\n      query: `\r\n      mutation {\r\n          stopExam (examID: \"${examID}\", teacherID: \"${teacherID}\")\r\n        }\r\n      `\r\n    }\r\n    callServer(stopExam, token, result => {\r\n      if (result.data.stopExam) {\r\n        toast.success(\"All students were logged out of the exam\")\r\n      }\r\n      this.props.history.push(\"/api/teacher/myExam\")\r\n      localStorage.setItem(\"exam_id\", \"\")\r\n      this.context.setExam(\"\")\r\n    })\r\n  }\r\n\r\n  handleTooglePermission = (e, s) => {\r\n    const examID = localStorage.getItem(\"exam_id\")\r\n    const token = this.context.token\r\n    const teacher = this.state.teacher\r\n    const restrictStudentByID = {\r\n      query: `\r\n        mutation{\r\n          restrictStudentByID(studentID : \"${s._id}\", teacherID: \"${teacher._id}\", examID: \"${examID}\") \r\n        }\r\n      `\r\n    }\r\n    const permitStudentByID = {\r\n      query: `\r\n        mutation{\r\n          permitStudentByID(studentID : \"${s._id}\", teacherID: \"${teacher._id}\", examID: \"${examID}\") \r\n        }\r\n      `\r\n    }\r\n    const students = this.state.students\r\n    const found = students.find(element => {\r\n      return element._id === s._id\r\n    })\r\n    this.setState({ student: found })\r\n    let td = this.state.temporaryRestrictedStudents\r\n    let temporaryRestrictedStudentIDs = td.map(s => s._id)\r\n    if (found.submission && temporaryRestrictedStudentIDs.includes(s._id) !== true) {\r\n      toast.info(`${found.name} Already submitted`)\r\n    } else {\r\n      if (e.target.checked) {\r\n        if (found.permanentStatus) {\r\n          toast.info(`${found.name} was permanently restricted for this exam`)\r\n        } else {\r\n          found.permission = true\r\n          found.submission = false\r\n          found.tempStatus = false\r\n          td.pop(found)\r\n          this.setState({ students, temporaryRestrictedStudents: td })\r\n          callServer(permitStudentByID, token, result => {\r\n            if (result.data.permitStudentByID) {\r\n              toast.success(`${found.name} was permitted`)\r\n            }\r\n          })\r\n        }\r\n      } else {\r\n        if (found.activeStatus) {\r\n          this.setState({ angryMode: true })\r\n        } else {\r\n          found.permission = false\r\n          this.setState({ students })\r\n          callServer(restrictStudentByID, token, result => {\r\n            if (result.data.restrictStudentByID) {\r\n              toast.success(`${found.name} was restricted`)\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleToogleSubmission = (e, s) => {\r\n    toast.info(\"Submission is an automatic process\")\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ angryMode: false, choice: 1 })\r\n  }\r\n  handleRadioChange = ({ currentTarget: e }) => {\r\n    this.setState({ choice: Number(e.value) })\r\n  }\r\n  handleAnger = () => {\r\n    let choice = this.state.choice\r\n    const s = this.state.student\r\n    const students = this.state.students\r\n    const examID = localStorage.getItem(\"exam_id\")\r\n    const token = this.context.token\r\n    const teacher = this.state.teacher\r\n    let found = students.find(element => {\r\n      return element._id === s._id\r\n    })\r\n    switch (choice) {\r\n      case 1: {\r\n        const temporaryRestrictStudentByID = {\r\n          query: `\r\n        mutation{\r\n          temporaryRestrictStudentByID(studentID : \"${s._id}\", teacherID: \"${teacher._id}\", examID: \"${examID}\") \r\n        }\r\n      `\r\n        }\r\n\r\n        let temporaryRestrictedStudents = this.state.temporaryRestrictedStudents\r\n        temporaryRestrictedStudents.push(s)\r\n        found.permission = false\r\n        found.submission = true\r\n        found.activeStatus = false\r\n        found.tempStatus = true\r\n        this.setState({ students, temporaryRestrictedStudents, angryMode: false })\r\n        callServer(temporaryRestrictStudentByID, token, result => {\r\n          if (result.data.temporaryRestrictStudentByID) {\r\n            toast.success(`${s.name} was temporarily restricted and kicked out`)\r\n          }\r\n        })\r\n        break\r\n      }\r\n      case 2: {\r\n        const restrictAndSubmitStudentByID = {\r\n          query: `\r\n        mutation{\r\n          restrictAndSubmitStudentByID(studentID : \"${s._id}\", teacherID: \"${teacher._id}\", examID: \"${examID}\") \r\n        }\r\n      `\r\n        }\r\n        found.permission = false\r\n        found.submission = true\r\n        found.activeStatus = false\r\n        found.permanentStatus = true\r\n        this.setState({ students, angryMode: false })\r\n        callServer(restrictAndSubmitStudentByID, token, result => {\r\n          if (result.data.restrictAndSubmitStudentByID) {\r\n            toast.success(`${found.name} was restricted and his answer was submitted`)\r\n          }\r\n        })\r\n        break\r\n      }\r\n      case 3: {\r\n        const permanentRestrictStudentByID = {\r\n          query: `\r\n        mutation{\r\n          permanentRestrictStudentByID(studentID : \"${s._id}\", teacherID: \"${teacher._id}\", examID: \"${examID}\") \r\n        }\r\n      `\r\n        }\r\n        found.permission = false\r\n        found.submission = false\r\n        found.activeStatus = false\r\n        found.permanentStatus = true\r\n        this.setState({ students, angryMode: false })\r\n        callServer(permanentRestrictStudentByID, token, result => {\r\n          if (result.data.permanentRestrictStudentByID) {\r\n            toast.success(`${found.name} was restricted permanently and his answer was not submitted`)\r\n          }\r\n        })\r\n        break\r\n      }\r\n      default: {\r\n        console.log(\"Default\")\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      title,\r\n      code,\r\n      totalMarks,\r\n      examDate,\r\n      totalTimeInMin,\r\n      courseTitle,\r\n      courseCode,\r\n      semester,\r\n      year\r\n    } = this.state.exam\r\n    const students = this.state.students\r\n    const teacher = this.state.teacher\r\n    const [dueDate, dueTime] = examDate.split(\"T\")\r\n    const dueDateTime = moment(\r\n      `${dueDate} ${dueTime}`,\r\n      \"YYYY-MM-DD HH:mm\"\r\n    ).format(\"dddd, MMMM Do YYYY, h:mm:ss a\")\r\n    const [day, date, time] = dueDateTime.split(\",\")\r\n    const today = moment().format(\"dddd, MMMM Do YYYY\")\r\n    return (\r\n      <div className=\"exam-room\">\r\n        <div className=\"er-left\">\r\n\r\n          <div className=\"er-students\">\r\n            <div className=\"er-header\">\r\n              <div className=\"er-header-text\">\r\n                Students\r\n              </div>\r\n            </div>\r\n            <div className=\"er-columns\">\r\n              <span className=\"er-column\">StudentID</span>\r\n              <span className=\"er-column\">Permission</span>\r\n              <span className=\"er-column\">Submission</span>\r\n              <span className=\"er-column\">Status</span>\r\n            </div>\r\n            {students.map(student => (\r\n              <div key={student._id} className=\"er-data-student\">\r\n                <span>{`${student.studentID.split(\"-\")[1]}-${student.studentID.split(\"-\")[3]}`}</span>\r\n                <span><SmallToogle\r\n                  onChange={(event) => this.handleTooglePermission(event, student)}\r\n                  status={student.permission}\r\n                /></span>\r\n                <span><SmallToogle\r\n                  onChange={(event) => this.handleToogleSubmission(event, student)}\r\n                  status={student.submission}\r\n                /></span>\r\n                <span className={`er-status \r\n                ${student.activeStatus ? \"er-green\" : \"\"} \r\n                ${student.tempStatus ? \"er-yellow\" : \"\"}\r\n                ${student.permanentStatus ? \"er-red\" : \"\"}\r\n                `} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"er-middle\">\r\n          <QuestionPaper questions={this.state.question.questions} />\r\n        </div>\r\n        <div className=\"er-right\">\r\n          <div className=\"er-exam-details\">\r\n            <div className=\"er-header\">\r\n              <div className=\"er-header-text\">\r\n                Exam Details\r\n              </div>\r\n            </div>\r\n            <div className=\"er-data\">Title: {title}</div>\r\n            <div className=\"er-data\">Exam Code: {code}</div>\r\n            <div className=\"er-data\">Full Marks: {totalMarks}</div>\r\n            <div className=\"er-data\">Duration: {totalTimeInMin} min</div>\r\n            <div className=\"er-data\">Course Title: {courseTitle}</div>\r\n            <div className=\"er-data\">Course Code: {courseCode}</div>\r\n            <div className=\"er-data\">Semester: {semester}</div>\r\n            <div className=\"er-data\">Year: {year}</div>\r\n            <div className=\"er-data\">\r\n              Exam Date: {day} {date}\r\n            </div>\r\n            <div className=\"er-data\">Today: {today}</div>\r\n            <div className=\"er-data\">Time: {time}</div>\r\n          </div>\r\n          <div className=\"er-my-profile\">\r\n            <div className=\"er-countdown\">\r\n              <div className=\"er-teacher\">\r\n                <div className=\"er-header\">\r\n                  <div className=\"er-header-text\">\r\n                    Teacher\r\n              </div>\r\n                </div>\r\n                <div className=\"er-data\">Name: {teacher.name}</div>\r\n                <div className=\"er-data\">Department: {teacher.deptCode}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"er-controls\">\r\n              <button onClick={this.handleStopExam} className=\"er-button\">\r\n                End Exam\r\n              </button>\r\n              <button onClick={this.handleExit} className=\"er-button\">\r\n                Go Back\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {this.state.angryMode && <div className=\"er-confirmation\">\r\n          <span className=\"close-icon\" onClick={this.handleClose}>\r\n            &#10006;\r\n            </span>\r\n          <div className=\"er-confirmation-container\">\r\n            <div className=\"er-confirmation-header\">\r\n              Are you sure?\r\n            </div>\r\n            <div className=\"er-confirmation-body\">\r\n              <div className=\"er-confirmation-info\">\r\n                {`${this.state.student.name} is active and you want to restrict him/her. Choose an option to proceed.`}\r\n              </div>\r\n              <div className=\"er-confirmation-choices\">\r\n                <input\r\n                  checked={this.state.choice === 1}\r\n                  type=\"radio\"\r\n                  id={1}\r\n                  name=\"er-confirmation-choices\"\r\n                  value={1}\r\n                  onChange={e => this.handleRadioChange(e)}\r\n                />\r\n                <label htmlFor={1} className=\"er-confirmation-ans\">\r\n                  <p className=\"ecc-text\">Temporarily restrict him/her. You can permit him/her later so he/she can resume answering then.</p>\r\n                </label>\r\n                <input\r\n                  checked={this.state.choice === 2}\r\n                  type=\"radio\"\r\n                  id={2}\r\n                  name=\"er-confirmation-choices\"\r\n                  value={2}\r\n                  onChange={e => this.handleRadioChange(e)}\r\n                />\r\n                <label htmlFor={2} className=\"er-confirmation-ans\">\r\n                  <p className=\"ecc-text\">Grant his/her answer upto which he/she answered and kick him/her out.</p>\r\n                </label>\r\n                <input\r\n                  checked={this.state.choice === 3}\r\n                  type=\"radio\"\r\n                  id={3}\r\n                  name=\"er-confirmation-choices\"\r\n                  value={3}\r\n                  onChange={e => this.handleRadioChange(e)}\r\n                />\r\n                <label htmlFor={3} className=\"er-confirmation-ans\">\r\n                  <p className=\"ecc-text\">Permanently discard his/her answer and kick him/her out.</p>\r\n                </label>\r\n              </div>\r\n            </div>\r\n            <div className=\"er-confirmation-footer\">\r\n              <button onClick={this.handleAnger} className=\"er-button\">Okay</button>\r\n            </div>\r\n          </div>\r\n        </div>}\r\n        {this.state.angryMode && <Backdrop />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExamRoom\r\n","import React, { Component } from 'react';\r\nimport \"./clock.css\"\r\n\r\nclass Clock extends Component {\r\n    state = {}\r\n    format(time) {\r\n        let seconds = time % 60;\r\n        let minutes = Math.floor(time / 60);\r\n        minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes;\r\n        seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds;\r\n        return minutes + ':' + seconds;\r\n    }\r\n    render() {\r\n        const { time } = this.props;\r\n        return (\r\n            <div className=\"displayedTime\">\r\n                <h1>{this.format(time)}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Clock\r\n","import React, { Component } from 'react'\r\nimport Clock from \"./Clock\"\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            count: 30 * 60,\r\n            running: false,\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.handleStart()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.running !== prevState.running) {\r\n            switch (this.state.running) {\r\n                case true:\r\n                    this.handleStart();\r\n                    break\r\n                default:\r\n                    return null\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.handleStop()\r\n    }\r\n\r\n    handleStart() {\r\n        this.timer = setInterval(() => {\r\n            const newCount = this.state.count - 1;\r\n            this.setState(\r\n                { count: newCount >= 0 ? newCount : 0 }\r\n            );\r\n        }, 1000);\r\n    }\r\n\r\n    handleStop() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n            this.setState(\r\n                { running: false }\r\n            );\r\n        }\r\n    }\r\n\r\n    handleReset() {\r\n        this.setState(\r\n            { count: 0 }\r\n        );\r\n    }\r\n\r\n    handleCountdown(seconds) {\r\n        this.setState({\r\n            count: seconds,\r\n            running: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { count } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <Clock time={count} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport callServer from \"../../http/http\"\r\nimport Timer from \"./Timer\"\r\nimport \"./studentExamRoom.css\"\r\nimport callSocketServer from \"../../http/web_socket\";\r\n\r\nclass StudentExamRoom extends Component {\r\n    state = {\r\n        duration: 0,\r\n        exam: {\r\n            _id: \"\",\r\n            title: \"\",\r\n            code: \"\",\r\n            totalMarks: 0,\r\n            examDate: \"\",\r\n            totalTimeInMin: 0,\r\n            status: false,\r\n            courseTitle: \"\",\r\n            courseCode: \"\",\r\n            semester: \"\",\r\n            year: 0\r\n        },\r\n        questions: [\r\n            {\r\n                id: 1,\r\n                text: \"\",\r\n                mark: 1,\r\n                image: \"\",\r\n                option_one: \"\",\r\n                option_two: \"\",\r\n                option_three: \"\",\r\n                option_four: \"\",\r\n                q_answer: 1\r\n            }\r\n        ],\r\n        answer: {\r\n            _id: \"\",\r\n            answers: [{\r\n                questionIndex: 1,\r\n                studentAnswer: 1\r\n            }]\r\n        }\r\n    }\r\n    static contextType = AuthContext\r\n\r\n    componentDidMount() {\r\n        const examID = localStorage.getItem(\"exam_id\")\r\n        const token = this.context.token\r\n        const student_id = this.context.userID\r\n        const getAnswer = {\r\n            query: `\r\n            mutation {\r\n                getAnswer (studentID : \"${student_id}\", examID: \"${examID}\"){\r\n                  _id\r\n                  answers {\r\n                    questionIndex\r\n                    studentAnswer\r\n                  }\r\n                }\r\n              }\r\n            `\r\n        }\r\n        const permanentStudentRestrict =\r\n            `\r\n        subscription {\r\n            permanentStudentRestrict (exam_id : \"${examID}\", studentID: \"${student_id}\"){\r\n            _id\r\n            name\r\n            studentID\r\n            status\r\n            }\r\n        }\r\n            `\r\n        const temporaryStudentRestrict =\r\n            `\r\n        subscription {\r\n            temporaryStudentRestrict (exam_id : \"${examID}\", studentID: \"${student_id}\"){\r\n            _id\r\n            name\r\n            studentID\r\n            status\r\n            }\r\n        }\r\n            `\r\n        const onExamStop =\r\n            `\r\n        subscription {\r\n            onExamStop (exam_id : \"${examID}\")\r\n        }\r\n            `\r\n        callSocketServer(onExamStop, (data, subscription) => {\r\n            if (data[\"onExamStop\"]) {\r\n                this.handleLogout()\r\n                subscription.unsubscribe()\r\n            }\r\n        })\r\n        callSocketServer(permanentStudentRestrict, (data, subscription) => {\r\n            console.log(data[\"permanentStudentRestrict\"])\r\n            if (data[\"permanentStudentRestrict\"][\"_id\"] === student_id) {\r\n                this.handleExit()\r\n                subscription.unsubscribe()\r\n            }\r\n        })\r\n        callSocketServer(temporaryStudentRestrict, (data, subscription) => {\r\n            console.log(data[\"temporaryStudentRestrict\"])\r\n            if (data[\"temporaryStudentRestrict\"][\"_id\"] === student_id) {\r\n                this.handleLogout()\r\n                subscription.unsubscribe()\r\n            }\r\n        })\r\n        const get_exam_by_id = {\r\n            query: `\r\n      query {\r\n        get_exam_by_id(examID: \"${examID}\"){\r\n          title\r\n          code\r\n          password\r\n          totalMarks\r\n          examDate\r\n          totalTimeInMin\r\n          status\r\n          date\r\n          course {\r\n            title\r\n            code\r\n          }\r\n          year\r\n          semester\r\n          question {\r\n            _id\r\n            questions {\r\n              id\r\n              text\r\n              mark\r\n              image\r\n              options {\r\n                id\r\n                text\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      `\r\n        }\r\n        callServer(getAnswer, token, result => {\r\n            let newAnswers = result.data.getAnswer\r\n            this.setState({ answer: newAnswers })\r\n            callServer(get_exam_by_id, token, result => {\r\n                if (!result.data) {\r\n                    toast.error(\"Can not get data\")\r\n                }\r\n                const newExam = result.data.get_exam_by_id\r\n                const questions = result.data.get_exam_by_id.question.questions\r\n                let question_data = []\r\n                console.log(question_data)\r\n                questions.map((q, i) => {\r\n                    console.log(q)\r\n                    return newAnswers[\"answers\"].map((a, j) => {\r\n                        console.log(a)\r\n                        if (i === j) {\r\n                            console.log(\"pushed\")\r\n                            return question_data.push({\r\n                                id: q.id,\r\n                                text: q.text,\r\n                                mark: q.mark,\r\n                                image: q.image,\r\n                                option_one: q.options[0].text,\r\n                                option_two: q.options[1].text,\r\n                                option_three: q.options[2].text,\r\n                                option_four: q.options[3].text,\r\n                                q_answer: a.studentAnswer\r\n                            })\r\n                        }\r\n                        return \"\"\r\n                    })\r\n                })\r\n                console.log(question_data)\r\n                this.setState({\r\n                    exam: {\r\n                        _id: newExam[\"_id\"],\r\n                        title: newExam[\"title\"],\r\n                        code: newExam[\"code\"],\r\n                        totalMarks: newExam[\"totalMarks\"],\r\n                        examDate: newExam[\"examDate\"],\r\n                        totalTimeInMin: newExam[\"totalTimeInMin\"],\r\n                        status: newExam[\"status\"],\r\n                        courseTitle: newExam[\"course\"][\"title\"],\r\n                        courseCode: newExam[\"course\"][\"code\"],\r\n                        semester: newExam[\"semester\"],\r\n                        year: newExam[\"year\"]\r\n                    },\r\n                    questions: question_data\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    handleLogout = () => {\r\n        const token = this.context.token\r\n        const userID = this.context.userID\r\n        const exam_id = this.context.exam_id\r\n        this.props.history.push(\"/\")\r\n        localStorage.clear()\r\n        const logoutStudent = {\r\n            query: `\r\n          query {\r\n            logoutStudent(studentID: \"${userID}\", examID: \"${exam_id}\")\r\n          }\r\n          `\r\n        }\r\n        callServer(logoutStudent, token, result => {\r\n            if (!result.data.logoutStudent) {\r\n                toast.error(\"Can not log you out\")\r\n            } else {\r\n                localStorage.setItem(\"exam_id\", \"\")\r\n                this.context.setExam(\"\")\r\n                toast.success(\"Submitted and logged you out\")\r\n            }\r\n\r\n        })\r\n    }\r\n    handleExit = () => {\r\n        const token = this.context.token\r\n        const userID = this.context.userID\r\n        const exam_id = this.context.exam_id\r\n        this.props.history.push(\"/\")\r\n        localStorage.clear()\r\n        const quitExam = {\r\n            query: `\r\n          query {\r\n            quitExam(studentID: \"${userID}\", examID: \"${exam_id}\")\r\n          }\r\n          `\r\n        }\r\n        callServer(quitExam, token, result => {\r\n            if (!result.data.quitExam) {\r\n                toast.error(\"Can not log you out\")\r\n            } else {\r\n                localStorage.setItem(\"exam_id\", \"\")\r\n                this.context.setExam(\"\")\r\n                toast.success(\"Logged you out\")\r\n            }\r\n\r\n        })\r\n    }\r\n    handleRadioChange = ({ currentTarget: e }, i) => {\r\n        const questions = [...this.state.questions]\r\n        const student_id = this.context.userID\r\n        const exam_id = this.context.exam_id\r\n        const token = this.context.token\r\n        let q_index = i\r\n        let q_answer = Number(e.value)\r\n\r\n        questions.map((q, index) => {\r\n            if (index === q_index) {\r\n                return (q.q_answer = q_answer)\r\n            }\r\n            return null\r\n        })\r\n        this.setState({ questions })\r\n\r\n        const writeAnswer = {\r\n            query: `\r\n            mutation {\r\n                writeAnswer(\r\n                studentID: \"${student_id}\", \r\n                examID: \"${exam_id}\", \r\n                question_index: ${q_index}, \r\n                question_answer: ${q_answer}\r\n                ) \r\n            }\r\n            `\r\n        }\r\n        callServer(writeAnswer, token, result => {\r\n            console.log(result)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const questions = this.state.questions || []\r\n        const examDuration = Number(this.state.exam.totalTimeInMin)\r\n\r\n        return (\r\n            <div className=\"student-exam-room\">\r\n                <div className=\"ser-container\">\r\n                    <div className=\"ser-header\">\r\n                        <div className=\"ser-controls\">\r\n                            <button onClick={this.handleLogout} className=\"ser-button\">Submit & Exit</button>\r\n                            <button onClick={this.handleExit} className=\"ser-button\">Exit</button>\r\n                        </div>\r\n                        <div className=\"ser-header-text\">\r\n                            Question\r\n                        </div>\r\n                        <Timer\r\n                            duration={examDuration}\r\n                        />\r\n                    </div>\r\n                    <div className=\"ser-body\">\r\n                        {questions.map((q, i) => (\r\n                            <div key={i} className=\"ser-single\">\r\n                                <div className=\"ser-serial\">\r\n                                    <h3>{q.id}.</h3>\r\n                                </div>\r\n                                <div className=\"ser-data\">\r\n                                    <div className=\"ser-data-title\">\r\n                                        <h3>{q.text}</h3>\r\n                                    </div>\r\n                                    <div className=\"ser-data-contain\">\r\n                                        <div className=\"ser-data-options\">\r\n                                            <div className=\"ser-data-option\">\r\n                                                <input\r\n                                                    checked={q.q_answer === 1}\r\n                                                    type=\"radio\"\r\n                                                    id={`q_ans_${i + 1}_1`}\r\n                                                    name={`q_answer_${i + 1}`}\r\n                                                    value={1}\r\n                                                    onChange={e => this.handleRadioChange(e, i)}\r\n                                                />\r\n                                                <label htmlFor={`q_ans_${i + 1}_1`} className=\"ans\">\r\n                                                    <p className=\"ser-opt-text\">{q.option_one}</p>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div className=\"ser-data-option\">\r\n                                                <input\r\n                                                    checked={q.q_answer === 2}\r\n                                                    type=\"radio\"\r\n                                                    id={`q_ans_${i + 1}_2`}\r\n                                                    name={`q_answer_${i + 1}`}\r\n                                                    value={2}\r\n                                                    onChange={e => this.handleRadioChange(e, i)}\r\n                                                />\r\n                                                <label htmlFor={`q_ans_${i + 1}_2`} className=\"ans\">\r\n                                                    <p className=\"ser-opt-text\">{q.option_two}</p>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div className=\"ser-data-option\">\r\n                                                <input\r\n                                                    checked={q.q_answer === 3}\r\n                                                    type=\"radio\"\r\n                                                    id={`q_ans_${i + 1}_3`}\r\n                                                    name={`q_answer_${i + 1}`}\r\n                                                    value={3}\r\n                                                    onChange={e => this.handleRadioChange(e, i)}\r\n                                                />\r\n                                                <label htmlFor={`q_ans_${i + 1}_3`} className=\"ans\">\r\n                                                    <p className=\"ser-opt-text\">{q.option_three}</p>\r\n                                                </label>\r\n                                            </div>\r\n                                            <div className=\"ser-data-option\">\r\n                                                <input\r\n                                                    checked={q.q_answer === 4}\r\n                                                    type=\"radio\"\r\n                                                    id={`q_ans_${i + 1}_4`}\r\n                                                    name={`q_answer_${i + 1}`}\r\n                                                    value={4}\r\n                                                    onChange={e => this.handleRadioChange(e, i)}\r\n                                                />\r\n                                                <label htmlFor={`q_ans_${i + 1}_4`} className=\"ans\">\r\n                                                    <p className=\"ser-opt-text\">{q.option_four}</p>\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"ser-data-image\">\r\n                                            <img src={q.image} alt=\"\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"ser-mark\">\r\n                                    <h3>{q.mark}</h3>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StudentExamRoom\r\n","import React, { Component } from \"react\"\r\nimport { NavLink } from \"react-router-dom\"\r\nimport AuthContext from \"../../context/auth-context\"\r\n\r\nclass Sidenav extends Component {\r\n  state = {}\r\n  render() {\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {context => {\r\n          return (\r\n            <div className=\"side-nav\">\r\n              <div className=\"nav-container\">\r\n                <h2 className=\"title-teacher\">{context.username}</h2>\r\n                <ul>\r\n                  <li>\r\n                    <NavLink\r\n                      exact\r\n                      to=\"/api/teacher/myExam\"\r\n                      activeClassName=\"nav-active\"\r\n                      className=\"nav-link\"\r\n                    >\r\n                      Add Exam\r\n                    </NavLink>\r\n                  </li>\r\n                  <li>\r\n                    <NavLink\r\n                      exact\r\n                      to=\"/api/teacher/change_password\"\r\n                      activeClassName=\"nav-active\"\r\n                      className=\"nav-link\"\r\n                    >\r\n                      Change Password\r\n                    </NavLink>\r\n                  </li>\r\n                  <li>\r\n                    <NavLink\r\n                      className=\"nav-link\"\r\n                      to=\"/\"\r\n                      onClick={context.logout}\r\n                    >\r\n                      Log Out\r\n                    </NavLink>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n      </AuthContext.Consumer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sidenav\r\n","import React, { Component } from 'react';\r\nimport \"./tabs.css\"\r\n\r\nclass Tabs extends Component {\r\n    state = {\r\n        selected: this.props.selected || 0\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.selected !== prevProps.selected) {\r\n            this.setState({ selected: this.props.selected })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tab_header\">\r\n                <ul className=\"inline\">\r\n                    {this.props.children.map((elem, index) => {\r\n                        let style = index === this.state.selected ? 'selected' : '';\r\n                        return <li\r\n                            className={style}\r\n                            key={index}\r\n                            onClick={() => this.props.handleTabInputChange(index)}\r\n                        >\r\n                            {elem.props.title}\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n                <div className=\"tab\">{this.props.children[this.state.selected]}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tabs;","import React from 'react';\r\n\r\nconst Panel = (props) => {\r\n    return (<div>{props.children}</div>);\r\n}\r\n\r\nexport default Panel;","import React from 'react';\r\nimport \"./SwitchToogle.css\"\r\n\r\nconst SwitchToogle = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className=\"checkbox-label\">{props.title}</h3>\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" onChange={props.onChange} checked={props.status ? true : false} />\r\n                <span className=\"slider round\"></span>\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default SwitchToogle;","import React from \"react\"\r\n\r\nconst Select = ({ name, label, options, onChange, value }) => {\r\n  return (\r\n    <div className=\"form-group-select\">\r\n      <label className=\"form-label\" htmlFor={name}>\r\n        {label}\r\n      </label>\r\n      <select\r\n        name={name}\r\n        id={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        className=\"select-control\"\r\n      >\r\n        {options.map(option => (\r\n          <option key={option._id} value={option.name}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import React, { Component } from 'react';\r\n\r\nimport Input from \"../../common/InputField\";\r\nimport SwitchToogle from \"../../common/SwitchToogle\";\r\nimport Backdrop from \"../../common/Backdrop\"\r\nimport Select from \"../../common/Select\"\r\nimport deleteIcon from \"../../../delete.svg\"\r\nimport editIcon from \"../../../edit.svg\"\r\n\r\nimport AuthContext from \"../../../context/auth-context\"\r\n\r\nclass ExamDetails extends Component {\r\n    static contextType = AuthContext\r\n    state = {\r\n        errors: {},\r\n        addMode: false,\r\n        editMode: false,\r\n        options_semester: [\r\n            { _id: 1, name: \"SPRING\" },\r\n            { _id: 2, name: \"SUMMER\" },\r\n            { _id: 3, name: \"WINTER\" },\r\n            { _id: 4, name: \"FALL\" }\r\n        ],\r\n        options_year: [\r\n            { _id: 1, name: \"2019\" },\r\n            { _id: 2, name: \"2020\" },\r\n            { _id: 3, name: \"2021\" }\r\n        ]\r\n    }\r\n    handleChange = ({ currentTarget: input }) => {\r\n        const exam = { ...this.props.exam };\r\n        exam[input.name] = input.value;\r\n        this.props.onInputChange(exam)\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.handleAddExam();\r\n        this.handleClose()\r\n    }\r\n\r\n    toogleCheckBox = e => {\r\n        const exam = { ...this.props.exam };\r\n        exam.status = e.target.checked;\r\n        this.props.onInputChange(exam)\r\n    };\r\n    handleAdd = () => {\r\n        this.props.clearState()\r\n        this.setState({ addMode: true })\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ addMode: false, editMode: false })\r\n        this.props.clearState()\r\n    }\r\n    raiseHandleEdit = t => {\r\n        this.setState({ editMode: true });\r\n        this.props.handleExamEdit(t)\r\n    };\r\n    raiseClearState = (e) => {\r\n        this.setState({ editMode: false });\r\n        this.props.clearState(e)\r\n    }\r\n\r\n    raiseHandleUpdate = (e) => {\r\n        this.setState({ editMode: false })\r\n        this.props.handleUpdate(e)\r\n    }\r\n\r\n    render() {\r\n        const { addMode, editMode } = this.state\r\n        const {\r\n            title,\r\n            code,\r\n            status,\r\n            password,\r\n            prevPassword,\r\n            newPassword,\r\n            totalMarks,\r\n            examDate,\r\n            totalTimeInMin,\r\n            courseTitle,\r\n            courseCode,\r\n            semester,\r\n            year\r\n        } = this.props.exam\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"student_controls\">\r\n                    <span className=\"exam-title\">My Exams</span>\r\n                    <div className=\"exam-button-container\">\r\n                        <button\r\n                            onClick={this.handleAdd}\r\n                            className=\"button-green\"\r\n                        >\r\n                            Add Exam\r\n                        </button>\r\n                        <div className=\"select-exam-group\">\r\n                            <Select\r\n                                name=\"semester\"\r\n                                label=\"\"\r\n                                onChange={this.props.handleSemesterChange}\r\n                                options={this.state.options_semester}\r\n                                value={this.props.semester}\r\n                            />\r\n                            <Select\r\n                                name=\"year\"\r\n                                label=\"\"\r\n                                onChange={this.props.handleYearChange}\r\n                                options={this.state.options_year}\r\n                                value={this.props.year}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"my_teachers_table\">\r\n                    <table id=\"table-for-exam\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th >Title</th>\r\n                                <th>CourseTitle</th>\r\n                                <th>Password</th>\r\n                                <th>Exam Status</th>\r\n                                <th />\r\n                                <th />\r\n                                <th />\r\n                                <th />\r\n                                <th />\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.exams.map((e) => (\r\n                                <tr key={e._id}>\r\n                                    <td>{e.title}</td>\r\n                                    <td>{e.course.title}</td>\r\n                                    <td>{e.password}</td>\r\n                                    <td><SwitchToogle\r\n                                        onChange={(event) => this.props.handleToogleCheckBoxExam(event, e)}\r\n                                        status={e.status}\r\n                                    /></td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={() => this.props.handleStudent(e)}\r\n                                            className=\"button-green\"\r\n                                        >\r\n                                            Students\r\n                                    </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={() => this.props.handleQuestion(e)}\r\n                                            className=\"button-green\"\r\n                                        >\r\n                                            Question\r\n                                    </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={this.context.exam_id === e._id && e.status ?\r\n                                                () => this.props.enterOngoingExam(e) :\r\n                                                () => this.props.handleStartExam(e)\r\n                                            }\r\n                                            className={this.context.exam_id === e._id && e.status ? \"button-blue\" : \"button-green\"}\r\n                                        >\r\n                                            {this.context.exam_id === e._id && e.status ? \"Enter\" : \"Start\"}\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <button\r\n                                            onClick={() => this.props.handleResult(e)}\r\n                                            className=\"button-green\"\r\n                                        >\r\n                                            Result\r\n                                    </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <div className=\"table-controls\">\r\n                                            <button onClick={() => this.raiseHandleEdit(e)}>\r\n                                                <img src={editIcon} alt=\"Edit\" className=\"table-icon-edit\" />\r\n                                            </button>\r\n                                            <button onClick={() => this.props.handleDeleteExam(e)}>\r\n                                                <img src={deleteIcon} alt=\"Delete\" className=\"table-icon-delete\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"general-details\">\r\n                    {(addMode || editMode) &&\r\n                        <div className=\"add_exam_form\">\r\n                            <span className=\"close-icon\" onClick={this.handleClose}>&#10006;</span>\r\n                            <h2>{editMode ? \"Update Exam\" : \"Add Exam\"}</h2>\r\n                            <form className=\"form-control-exam\" onSubmit={editMode ? this.raiseHandleUpdate : this.handleSubmit}>\r\n                                <div className=\"general-details-container\">\r\n                                    <div className=\"input-groups-exam\">\r\n                                        <Input\r\n                                            name=\"title\"\r\n                                            value={title}\r\n                                            label=\"Exam Title\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"text\"\r\n                                            error={this.state.errors.title}\r\n                                        />\r\n                                        <Input\r\n                                            name=\"code\"\r\n                                            value={code}\r\n                                            label=\"Exam Code\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"text\"\r\n                                            error={this.state.errors.code}\r\n                                        />\r\n                                        <Input\r\n                                            name=\"courseCode\"\r\n                                            value={courseCode}\r\n                                            label=\"Course Code\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"text\"\r\n                                            error={this.state.errors.courseCode}\r\n                                        />\r\n                                        <Input\r\n                                            name=\"courseTitle\"\r\n                                            value={courseTitle}\r\n                                            label=\"Course Title\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"text\"\r\n                                            error={this.state.errors.courseTitle}\r\n                                        />\r\n                                        <SwitchToogle\r\n                                            onChange={e => this.toogleCheckBox(e)}\r\n                                            status={status}\r\n                                            title='Status'\r\n                                        />\r\n\r\n                                    </div>\r\n                                    <div className=\"select-groups-exam\">\r\n                                        <div className=\"select-exam-group-editMode\">\r\n                                            <Select\r\n                                                name=\"semester\"\r\n                                                label=\"Semester\"\r\n                                                onChange={this.handleChange}\r\n                                                options={this.state.options_semester}\r\n                                                value={semester}\r\n                                            />\r\n                                            <Select\r\n                                                name=\"year\"\r\n                                                label=\"Year\"\r\n                                                onChange={this.handleChange}\r\n                                                options={this.state.options_year}\r\n                                                value={year}\r\n                                            />\r\n                                        </div>\r\n                                        <Input\r\n                                            name=\"totalMarks\"\r\n                                            value={totalMarks}\r\n                                            label=\"Total Marks\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"number\"\r\n                                        />\r\n                                        <Input\r\n                                            name=\"totalTimeInMin\"\r\n                                            value={totalTimeInMin}\r\n                                            label=\"Duration (min)\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"number\"\r\n                                        />\r\n                                        {editMode ? <React.Fragment>\r\n                                            <Input\r\n                                                name=\"prevPassword\"\r\n                                                value={prevPassword}\r\n                                                label=\"New Password\"\r\n                                                onChange={this.handleChange}\r\n                                                type=\"password\"\r\n                                                error={this.state.errors.password}\r\n                                            />\r\n                                            <Input\r\n                                                name=\"newPassword\"\r\n                                                value={newPassword}\r\n                                                label=\"Confirm New Password\"\r\n                                                onChange={this.handleChange}\r\n                                                type=\"password\"\r\n                                                error={this.state.errors.password}\r\n                                            />\r\n                                        </React.Fragment> : <Input\r\n                                                name=\"password\"\r\n                                                value={password}\r\n                                                label=\"Password\"\r\n                                                onChange={this.handleChange}\r\n                                                type=\"password\"\r\n                                                error={this.state.errors.password}\r\n                                            />}\r\n                                        <Input\r\n                                            name=\"examDate\"\r\n                                            value={examDate}\r\n                                            label=\"Exam Date\"\r\n                                            onChange={this.handleChange}\r\n                                            type=\"datetime-local\"\r\n                                            error={this.state.errors.examDate}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"button-group-exam\">\r\n                                    <button type=\"submit\" className=\"form-button\">\r\n                                        {editMode ? \"Update\" : \"Save\"}\r\n                                    </button>\r\n                                    {addMode && <button\r\n                                        onClick={(e) => this.raiseClearState(e)}\r\n                                        className=\"form-button\"\r\n                                    >\r\n                                        Clear\r\n                                    </button>}\r\n                                </div>\r\n                            </form>\r\n                        </div>}\r\n                </div>\r\n                {(addMode || editMode) && <Backdrop />}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExamDetails;","import { toast } from \"react-toastify\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport history from \"../history\"\r\n\r\nfunction callUploadServer(exam_id, question_id, question_no, form_data, token, callback) {\r\n    if (token) {\r\n        const { exp: tokenExpiration } = jwt.decode(token)\r\n        if (tokenExpiration < Date.now() / 1000) {\r\n            localStorage.clear()\r\n            toast.info(\"Token Expired. Please login again...\")\r\n            history.replace(\"/\")\r\n            return\r\n        }\r\n    }\r\n    fetch(`http://localhost:4000/api/upload?e_id=${exam_id}&q_id=${question_id}&q_no=${question_no}`, {\r\n        method: \"POST\",\r\n        body: form_data,\r\n        headers: {\r\n            Authorization: \"Bearer \" + token\r\n        }\r\n    }).then(res => {\r\n        res.json().then(question => {\r\n            callback(question)\r\n        })\r\n    })\r\n}\r\n\r\nexport default callUploadServer\r\n","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nimport AuthContext from \"../../../context/auth-context\"\r\nimport callServer from \"../../../http/http\"\r\nimport callUploadServer from \"../../../http/image_uploader\"\r\n\r\nclass Question extends Component {\r\n  static contextType = AuthContext\r\n  state = {\r\n    authenticated: this.context.token ? true : false,\r\n    question_id: \"\",\r\n    questions: [\r\n      {\r\n        id: 1,\r\n        text: \"\",\r\n        mark: 1,\r\n        image: \"\",\r\n        option_one: \"\",\r\n        option_two: \"\",\r\n        option_three: \"\",\r\n        option_four: \"\",\r\n        q_answer: 1\r\n      }\r\n    ],\r\n    updateMode: false,\r\n    selectedFile: null\r\n  }\r\n  componentDidMount() {\r\n    const token = this.context.token\r\n    const get_question_by_exam = {\r\n      query: `\r\n            query {\r\n                get_question_by_exam (examID : \"${this.props.exam._id}\") {\r\n                _id\r\n                questions {\r\n                    id\r\n                    text\r\n                    mark\r\n                    image\r\n                    options {\r\n                      id\r\n                      text\r\n                      answer\r\n                    }\r\n                }\r\n                date\r\n                }\r\n            }\r\n        `\r\n    }\r\n    callServer(get_question_by_exam, token, result => {\r\n      if (!result.data.get_question_by_exam) {\r\n        toast.success(\"You have no existing question\")\r\n      } else {\r\n        let questions = result.data.get_question_by_exam.questions\r\n        console.log(questions)\r\n        const question_id = result.data.get_question_by_exam._id\r\n        toast.success(`You have ${questions.length} existing question`)\r\n        let existingQuestions = []\r\n        let rt_ans = 1\r\n        questions.map(q => {\r\n          if (q.options.length !== 0) {\r\n            q.options.map((o, i) => {\r\n              if (o.answer === true) {\r\n                rt_ans = i + 1\r\n              }\r\n              return rt_ans\r\n            })\r\n          }\r\n          console.log(existingQuestions)\r\n          return existingQuestions.push({\r\n            id: q.id,\r\n            text: q.text,\r\n            mark: q.mark,\r\n            image: q.image,\r\n            option_one: q.options[0].text || \"\",\r\n            option_two: q.options[1].text || \"\",\r\n            option_three: q.options[2].text || \"\",\r\n            option_four: q.options[3].text || \"\",\r\n            q_answer: rt_ans\r\n          })\r\n        })\r\n        console.log(existingQuestions)\r\n        this.setState({ question_id, questions: existingQuestions, updateMode: true })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleKeyDown(e) {\r\n    e.target.style.height = \"inherit\"\r\n    e.target.style.height = `${e.target.scrollHeight}px`\r\n  }\r\n\r\n  handleChange = ({ currentTarget: e }, i) => {\r\n    const questions = [...this.state.questions]\r\n    questions.map((q, index) => {\r\n      if (index === i) {\r\n        if (e.type === \"number\") {\r\n          return (q[e.name] = Number(e.value))\r\n        }\r\n        return (q[e.name] = e.value)\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ questions })\r\n  }\r\n\r\n  handleRadioChange = ({ currentTarget: e }, i) => {\r\n    console.log(i)\r\n    const questions = [...this.state.questions]\r\n    questions.map((q, index) => {\r\n      if (index === i) {\r\n        return (q.q_answer = Number(e.value))\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ questions })\r\n  }\r\n\r\n  handleQuestionAdd = e => {\r\n    e.preventDefault()\r\n    const questions = [...this.state.questions]\r\n    const newQuestion = {\r\n      id: questions.length + 1,\r\n      text: \"\",\r\n      mark: 1,\r\n      option_one: \"\",\r\n      option_two: \"\",\r\n      option_three: \"\",\r\n      option_four: \"\",\r\n      q_answer: 1\r\n    }\r\n    questions.push(newQuestion)\r\n    this.setState({ questions })\r\n  }\r\n  handleQuestionDelete = (e, i) => {\r\n    e.preventDefault()\r\n    const questions = [...this.state.questions]\r\n    questions.splice(i, 1)\r\n    this.setState({ questions })\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    let examID = this.props.exam._id\r\n    const token = this.context.token\r\n    const questions = [...this.state.questions]\r\n    let newArrayOfQuestions = []\r\n    questions.map(q => {\r\n      let answer_1 = false\r\n      let answer_2 = false\r\n      let answer_3 = false\r\n      let answer_4 = false\r\n      if (q.q_answer === 1) answer_1 = true\r\n      if (q.q_answer === 2) answer_2 = true\r\n      if (q.q_answer === 3) answer_3 = true\r\n      if (q.q_answer === 4) answer_4 = true\r\n      return newArrayOfQuestions.push(`{\r\n                id: ${q.id},\r\n                mark: ${q.mark},\r\n                text: \"${q.text}\",\r\n                options: [\r\n                    {\r\n                        text: \"${q.option_one}\",\r\n                        answer: ${answer_1},\r\n                        id: 1\r\n                    },\r\n                    {\r\n                        text: \"${q.option_two}\",\r\n                        answer: ${answer_2},\r\n                        id: 2\r\n                    },\r\n                    {\r\n                        text: \"${q.option_three}\",\r\n                        answer: ${answer_3},\r\n                        id: 3\r\n                    },\r\n                    {\r\n                        text: \"${q.option_four}\",\r\n                        answer: ${answer_4},\r\n                        id: 4\r\n                    }\r\n                ]\r\n            }`)\r\n    })\r\n\r\n    const addQuestion = {\r\n      query: `\r\n            mutation {\r\n                addQuestion (questionInput : {\r\n                    exam : \"${examID}\",\r\n                    questions : [${newArrayOfQuestions}]\r\n                    }) {\r\n                        _id\r\n                        questions {\r\n                            id\r\n                            mark\r\n                            text\r\n                            options {\r\n                                id\r\n                                text\r\n                                answer\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            `\r\n    }\r\n    let sum = 0\r\n    for (let i = 0; i < questions.length; i++) {\r\n      sum += Number(questions[i][\"mark\"])\r\n    }\r\n    if (sum !== Number(this.props.exam.totalMarks) && sum !== 0) {\r\n      toast.error(\"Summation of marks is not equal to full marks\")\r\n    } else {\r\n      callServer(addQuestion, token, result => {\r\n        if (result.data.addQuestion) {\r\n          if (this.state.updateMode) {\r\n            toast.success(\"Successfully Updated Question\")\r\n          } else {\r\n            toast.success(\"Successfully Added a new Question\")\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n  handleImageUpload = (e) => {\r\n    console.log(e.target.files[0])\r\n    this.setState({\r\n      selectedFile: e.target.files[0]\r\n    })\r\n  }\r\n  onClickHandler = (i) => {\r\n    const token = this.context.token\r\n    const exam_id = this.props.exam._id\r\n    const question_id = this.state.question_id\r\n    const data = new FormData()\r\n    data.append('file', this.state.selectedFile)\r\n\r\n    if (!this.state.selectedFile) {\r\n      toast.error(\"You must choose a file first\")\r\n      return\r\n    }\r\n    if (!question_id) {\r\n      toast.error(\"You must submit the question first\")\r\n      return\r\n    }\r\n    callUploadServer(exam_id, question_id, i, data, token, result => {\r\n      console.log(result)\r\n      if (result.error) {\r\n        toast.error(`${result.error}`)\r\n        return\r\n      }\r\n      let questions = this.state.questions\r\n      const qs = result.question.questions\r\n      for (let j = 0; j < qs.length; j++) {\r\n        if (j === i) {\r\n          console.log(qs[j])\r\n          for (let k = 0; k < questions.length; k++) {\r\n            if (k === i) {\r\n              questions[k].image = qs[i].image\r\n            }\r\n          }\r\n          this.setState({ questions })\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n    const { questions } = this.state\r\n    const {\r\n      course: { code },\r\n      title,\r\n      year,\r\n      totalMarks,\r\n      totalTimeInMin\r\n    } = this.props.exam\r\n    return (\r\n      <div className=\"question_container\">\r\n        <div className=\"question_header\">\r\n          <div className=\"university\">State University of Bangladesh</div>\r\n          <div className=\"q_title\">\r\n            {code} {title} MCQ Exam -{year}\r\n          </div>\r\n          <div className=\"q_detail\">\r\n            <div className=\"q_time\">Duration : {totalTimeInMin} mins</div>\r\n            <div className=\"q_full_mark\">Full Marks : {totalMarks}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"question_body\">\r\n          {questions.map((q, i) => (\r\n            <div key={i} className=\"q_single\">\r\n              <div className=\"q_index\">\r\n                <div className=\"q_index_no\">{i + 1}</div>\r\n                <button\r\n                  onClick={e => this.handleQuestionDelete(e, i)}\r\n                  className=\"q_delete\"\r\n                >\r\n                  Delete\r\n                  </button>\r\n              </div>\r\n              <div className=\"q_container\">\r\n                <div className=\"q\">\r\n                  <textarea\r\n                    value={q.text}\r\n                    name=\"text\"\r\n                    rows={1}\r\n                    className=\"q_question\"\r\n                    id=\"q_q\"\r\n                    type=\"text\"\r\n                    onKeyDown={this.handleKeyDown}\r\n                    placeholder={`Type your question ${i + 1} here.`}\r\n                    onChange={e => this.handleChange(e, i)}\r\n                    spellCheck=\"false\"\r\n                  />\r\n                </div>\r\n                <div className=\"q_image_all\">\r\n                  <div className=\"q_image_input\">\r\n                    <input type=\"file\" name=\"file\" onChange={this.handleImageUpload} />\r\n                    <button type=\"button\" className=\"button-upload\" onClick={() => this.onClickHandler(i)}>Upload</button>\r\n                  </div>\r\n                  <div className=\"q_k\">\r\n                    <img src={q.image} alt=\"\" />\r\n                  </div>\r\n                </div>\r\n                <div className=\"q_data\">\r\n                  <div className=\"q_answer\">\r\n                    <div className=\"q_single_answer_1\">\r\n                      <div className=\"q_single_answer\">\r\n                        <input\r\n                          checked={q.q_answer === 1}\r\n                          type=\"radio\"\r\n                          id={`q_ans_${i + 1}_1`}\r\n                          name={`q_answer_${i + 1}`}\r\n                          value={1}\r\n                          onChange={e => this.handleRadioChange(e, i)}\r\n                        />\r\n                        <label htmlFor={`q_ans_${i + 1}_1`} className=\"ans\">\r\n                          <textarea\r\n                            rows={1}\r\n                            name=\"option_one\"\r\n                            value={q.option_one}\r\n                            className=\"q_ans_inp\"\r\n                            type=\"text\"\r\n                            placeholder={`Type question ${i + 1} option 1.`}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            spellCheck=\"false\"\r\n                            onChange={e => this.handleChange(e, i)}\r\n                          />\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"q_single_answer\">\r\n                        <input\r\n                          checked={q.q_answer === 2}\r\n                          type=\"radio\"\r\n                          id={`q_ans_${i + 1}_2`}\r\n                          name={`q_answer_${i + 1}`}\r\n                          value={2}\r\n                          onChange={e => this.handleRadioChange(e, i)}\r\n                        />\r\n                        <label htmlFor={`q_ans_${i + 1}_2`} className=\"ans\">\r\n                          <textarea\r\n                            name=\"option_two\"\r\n                            value={q.option_two}\r\n                            rows={1}\r\n                            className=\"q_ans_inp\"\r\n                            type=\"text\"\r\n                            placeholder={`Type question ${i + 1} option 2.`}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            spellCheck=\"false\"\r\n                            onChange={e => this.handleChange(e, i)}\r\n                          />\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"q_single_answer_2\">\r\n                      <div className=\"q_single_answer\">\r\n                        <input\r\n                          checked={q.q_answer === 3}\r\n                          type=\"radio\"\r\n                          id={`q_ans_${i + 1}_3`}\r\n                          name={`q_answer_${i + 1}`}\r\n                          value={3}\r\n                          onChange={e => this.handleRadioChange(e, i)}\r\n                        />\r\n                        <label htmlFor={`q_ans_${i + 1}_3`} className=\"ans\">\r\n                          <textarea\r\n                            name=\"option_three\"\r\n                            value={q.option_three}\r\n                            rows={1}\r\n                            className=\"q_ans_inp\"\r\n                            type=\"text\"\r\n                            placeholder={`Type question ${i + 1} option 3.`}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            spellCheck=\"false\"\r\n                            onChange={e => this.handleChange(e, i)}\r\n                          />\r\n                        </label>\r\n                      </div>\r\n                      <div className=\"q_single_answer\">\r\n                        <input\r\n                          type=\"radio\"\r\n                          checked={q.q_answer === 4}\r\n                          id={`q_ans_${i + 1}_4`}\r\n                          name={`q_answer_${i + 1}`}\r\n                          value={4}\r\n                          onChange={e => this.handleRadioChange(e, i)}\r\n                        />\r\n                        <label htmlFor={`q_ans_${i + 1}_4`} className=\"ans\">\r\n                          <textarea\r\n                            name=\"option_four\"\r\n                            value={q.option_four}\r\n                            rows={1}\r\n                            className=\"q_ans_inp\"\r\n                            type=\"text\"\r\n                            placeholder={`Type question ${i + 1} option 4.`}\r\n                            onKeyDown={this.handleKeyDown}\r\n                            spellCheck=\"false\"\r\n                            onChange={e => this.handleChange(e, i)}\r\n                          />\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"q_mark\">\r\n                <input\r\n                  type=\"number\"\r\n                  className=\"q_index_inp\"\r\n                  placeholder={1}\r\n                  value={q.mark}\r\n                  name=\"mark\"\r\n                  onChange={e => this.handleChange(e, i)}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <button onClick={e => this.handleQuestionAdd(e)} className=\"q_add\">\r\n            Add\r\n            </button>\r\n          <button onClick={this.handleSubmit} className=\"q_submit\">\r\n            {this.state.updateMode ? \"Update\" : \"Submit\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Question\r\n","import React, { Component } from \"react\"\r\nimport XLSX from 'xlsx'\r\n\r\n\r\nclass Uploader extends Component {\r\n  SheetJSFT = [\r\n    \"xlsx\", \"xlsb\", \"xlsm\", \"xls\"\r\n  ].map(function (x) { return \".\" + x; }).join(\",\");\r\n\r\n  handleFile = (e) => {\r\n    console.log(\"handle file called\")\r\n    const reader = new FileReader();\r\n    const rABS = !!reader.readAsBinaryString;\r\n\r\n    reader.onload = (e) => {\r\n      const bstr = e.target.result;\r\n      const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array', bookVBA: true });\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      const data = XLSX.utils.sheet_to_json(ws);\r\n      this.props.extractData(data)\r\n    };\r\n\r\n    if (rABS) {\r\n      reader.readAsBinaryString(this.props.file);\r\n    } else {\r\n      reader.readAsArrayBuffer(this.props.file);\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"excel-control\" >\r\n        <h2>Upload your {this.props.title} from Excel</h2>\r\n        <div className=\"initial-controls\">\r\n          <input\r\n            type=\"file\"\r\n            name=\"file\"\r\n            id=\"file\"\r\n            accept={this.SheetJSFT}\r\n            className=\"inputfile\"\r\n            onChange={this.props.uploadHandler}\r\n          />\r\n          <label htmlFor=\"file\" className=\"input-label\">\r\n            {this.props.name ? \"Choosed\" : \"Choose a File\"}\r\n          </label>\r\n          <span style={{ marginLeft: 10, marginRight: 10 }}>{this.props.name}</span>\r\n        </div>\r\n        {this.props.name ? (\r\n          <span>\r\n            <button onClick={this.handleFile} type=\"submit\" className=\"form-button\">\r\n              Extract Data\r\n          </button>\r\n            <button type=\"button\" className=\"form-button\" onClick={(e) => this.props.cancelUpload(e)}>\r\n              Cancel\r\n          </button>\r\n          </span>\r\n        ) : (\r\n            <div />\r\n          )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Uploader\r\n","import React, { Component } from \"react\"\r\nimport Input from \"../../common/InputField\"\r\nimport Uploader from \"../../common/Uploader\"\r\n\r\nclass StudentForm extends Component {\r\n  state = {}\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      password,\r\n      studentID,\r\n      prevPassword,\r\n      newPassword\r\n    } = this.props.student\r\n    return (\r\n      <React.Fragment>\r\n        {(this.props.addMode || this.props.editMode) && !this.props.uploadMode && (\r\n          <div className=\"add_data_form\">\r\n            <span className=\"close-icon\" onClick={this.props.raiseClose}>\r\n              &#10006;\r\n            </span>\r\n            <h2>{this.props.editMode ? \"Update Student\" : \"Add Student\"}</h2>\r\n            <form\r\n              onSubmit={\r\n                this.props.editMode\r\n                  ? this.props.raiseUpdate\r\n                  : this.props.raiseSubmit\r\n              }\r\n              className=\"form-control\"\r\n            >\r\n              <Input\r\n                name=\"name\"\r\n                value={name}\r\n                label=\"Name\"\r\n                onChange={e => this.props.raiseChange(e)}\r\n                type=\"text\"\r\n              />\r\n              <Input\r\n                name=\"studentID\"\r\n                value={studentID}\r\n                label=\"StudentID\"\r\n                onChange={e => this.props.raiseChange(e)}\r\n                type=\"text\"\r\n              />\r\n              {!this.props.editMode && (\r\n                <Input\r\n                  name=\"password\"\r\n                  value={password}\r\n                  label=\"Password\"\r\n                  onChange={e => this.props.raiseChange(e)}\r\n                  type=\"password\"\r\n                />\r\n              )}\r\n              {this.props.editMode && (\r\n                <React.Fragment>\r\n                  <Input\r\n                    name=\"prevPassword\"\r\n                    value={prevPassword}\r\n                    label=\"New Password\"\r\n                    onChange={e => this.props.raiseChange(e)}\r\n                    type=\"password\"\r\n                  />\r\n                  <Input\r\n                    name=\"newPassword\"\r\n                    value={newPassword}\r\n                    label=\"Confirm New Password\"\r\n                    onChange={e => this.props.raiseChange(e)}\r\n                    type=\"password\"\r\n                  />\r\n                </React.Fragment>\r\n              )}\r\n              <div className=\"button-group\">\r\n                {!this.props.editMode && (\r\n                  <React.Fragment>\r\n                    <button type=\"submit\" className=\"form-button\">\r\n                      Add\r\n                    </button>\r\n                    <button\r\n                      onClick={this.props.raiseClearState}\r\n                      className=\"form-button\"\r\n                    >\r\n                      Clear\r\n                    </button>\r\n                  </React.Fragment>\r\n                )}\r\n                {this.props.editMode && (\r\n                  <button type=\"submit\" className=\"form-button\">\r\n                    Update\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n        {this.props.uploadMode && (\r\n          <div className=\"add_data_form\">\r\n            <span className=\"close-icon\" onClick={this.props.raiseClose}>\r\n              &#10006;\r\n            </span>\r\n            <Uploader\r\n              uploadHandler={this.props.raiseUpload}\r\n              cancelUpload={this.props.raiseCancelUpload}\r\n              extractData={this.props.dataExtractor}\r\n              name={this.props.selectedFileName}\r\n              file={this.props.selectedFile}\r\n              title=\"Students\"\r\n            />\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StudentForm\r\n","import React, { Component } from \"react\"\r\nimport SwitchToogle from \"../../common/SwitchToogle\"\r\nimport deleteIcon from \"../../../delete.svg\"\r\nimport editIcon from \"../../../edit.svg\"\r\nimport ReactToPrint from 'react-to-print';\r\nimport { Link } from \"react-router-dom\"\r\nimport printIcon from \"../../../print.svg\"\r\n\r\nclass StudentTable extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"oem_table\" ref={el => (this.componentRef = el)}>\r\n        <div className=\"student-print-container\">\r\n          <ReactToPrint\r\n            trigger={() => <Link to=\"#\"><img className=\"student-print\" src={printIcon} alt=\"Print\" /></Link>}\r\n            content={() => this.componentRef}\r\n          />\r\n        </div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>StudentID</th>\r\n              <th>{`Student Status (${this.props.countActiveStudents() ||\r\n                \"0\"})`}</th>\r\n              <th>{`Submit Status`}</th>\r\n              <th>Password</th>\r\n              <th />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.students.map(s => (\r\n              <tr key={s._id}>\r\n                <td>{s.name}</td>\r\n                <td>{s.studentID}</td>\r\n                <td>\r\n                  <SwitchToogle\r\n                    onChange={e => this.props.handleToogleCheckBox(e, s)}\r\n                    status={s.status}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <SwitchToogle\r\n                    onChange={this.props.handleSubmitStatus}\r\n                    status={s.submitStatus}\r\n                  />\r\n                </td>\r\n                <td>{s.password}</td>\r\n\r\n                <td>\r\n                  <div className=\"table-controls\">\r\n                    <button onClick={() => this.props.raiseEdit(s)}>\r\n                      <img src={editIcon} alt=\"Edit\" className=\"table-icon-edit\" />\r\n                    </button>\r\n                    <button onClick={() => this.props.raiseDelete(s)}>\r\n                      <img src={deleteIcon} alt=\"Delete\" className=\"table-icon-delete\" />\r\n                    </button>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StudentTable\r\n","import React from \"react\"\r\n\r\nconst StudentControls = props => {\r\n  return (\r\n    <div className=\"student_controls\">\r\n      <span className=\"exam-title\">My Students</span>\r\n      <div className=\"exam-button-container\">\r\n        <button\r\n          onClick={() => props.handleBackToExam(props.exam)}\r\n          className=\"button-green\"\r\n        >\r\n          Back to Exam\r\n        </button>\r\n        <button onClick={props.handleAdd} className=\"button-green\">\r\n          Add Student\r\n        </button>\r\n        <button onClick={props.handleFileUpload} className=\"button-green\">\r\n          Upload\r\n        </button>\r\n        <button\r\n          onClick={() => props.handleAssignStudents(props.exam)}\r\n          className=\"button-green\"\r\n        >\r\n          Assign\r\n        </button>\r\n        <button\r\n          onClick={() => props.handleGoToQuestion(props.exam)}\r\n          className=\"button-green\"\r\n        >\r\n          Go to Question\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StudentControls\r\n","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nimport Backdrop from \"../../common/Backdrop\"\r\nimport callServer from \"../../../http/http\"\r\nimport AuthContext from \"../../../context/auth-context\"\r\nimport StudentForm from \"./StudentForm\"\r\nimport StudentTable from \"./StudentTable\"\r\nimport StudentControls from \"./StudentControls\"\r\nclass MyStudents extends Component {\r\n  state = {\r\n    selectedFileName: \"\",\r\n    selectedFile: {},\r\n    students: [],\r\n    assignedStudents: [],\r\n    student: {\r\n      id: \"\",\r\n      name: \"\",\r\n      status: false,\r\n      submitStatus: false,\r\n      studentID: \"\",\r\n      password: \"\",\r\n      prevPassword: \"\",\r\n      newPassword: \"\"\r\n    },\r\n    errors: {},\r\n    addMode: false,\r\n    editMode: false,\r\n    uploadMode: false,\r\n    dataChanged: false\r\n  }\r\n\r\n  static contextType = AuthContext\r\n\r\n  componentDidMount() {\r\n    const submittedStudents = this.props.exam.submittedStudents || []\r\n    const token = this.context.token\r\n    let value = this.context.userID\r\n    const get_all_students = {\r\n      query: `\r\n        query {\r\n          get_all_students (teacherID: \"${value}\") {\r\n            _id\r\n            name\r\n            studentID\r\n            password\r\n            status\r\n            submitStatus\r\n          }\r\n        }\r\n      `\r\n    }\r\n    const get_assigned_student = {\r\n      query: `\r\n        query {\r\n          get_assigned_student (teacherID: \"${value}\", examID: \"${this.props.exam._id}\") {\r\n            _id\r\n            name\r\n            studentID\r\n            password\r\n            status\r\n            submitStatus\r\n          }\r\n        }\r\n      `\r\n    }\r\n    callServer(get_assigned_student, token, result => {\r\n      if (result.data) {\r\n        this.setState({ assignedStudents: result.data.get_assigned_student })\r\n      }\r\n      const assignedStudents = result.data.get_assigned_student\r\n      callServer(get_all_students, token, result => {\r\n        const allStudents = result.data.get_all_students\r\n        for (let i = 0; i < allStudents.length; i++) {\r\n          if (assignedStudents.length !== 0) {\r\n            for (let j = 0; j < assignedStudents.length; j++) {\r\n              if (allStudents[i]._id === assignedStudents[j]._id) {\r\n                allStudents[i].status = true\r\n              }\r\n            }\r\n          }\r\n          if (submittedStudents.length !== 0) {\r\n            for (let j = 0; j < submittedStudents.length; j++) {\r\n              if (allStudents[i]._id === submittedStudents[j]._id) {\r\n                allStudents[i].submitStatus = true\r\n              }\r\n            }\r\n          }\r\n        }\r\n        let students = this.state.students\r\n        allStudents.map(data => {\r\n          return students.push(data)\r\n        })\r\n        this.setState({ students })\r\n      })\r\n    })\r\n\r\n\r\n  }\r\n\r\n  cancelUpload = () => {\r\n    this.setState({ selectedFileName: \"\", selectedFile: {} })\r\n  }\r\n\r\n  handleUpload = e => {\r\n    const files = Array.from(e.target.files)\r\n    if (files) this.setState({ selectedFileName: files[0].name, selectedFile: files[0] })\r\n  }\r\n\r\n  handleEdit = s => {\r\n    const student = { ...this.state.student }\r\n    student.id = s._id\r\n    student.name = s.name\r\n    student.status = s.status\r\n    student.studentID = s.studentID\r\n    student.password = \"\"\r\n    const mode = this.state.editMode\r\n    this.setState({ student, editMode: !mode })\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const student = { ...this.state.student }\r\n    student[input.name] = input.value\r\n    this.setState({ student })\r\n  }\r\n  handleClearState = e => {\r\n    e.preventDefault()\r\n    const student = { ...this.state.student }\r\n    student.name = \"\"\r\n    student.id = \"\"\r\n    student.status = false\r\n    student.studentID = \"\"\r\n    student.newPassword = \"\"\r\n    student.prevPassword = \"\"\r\n    student.password = \"\"\r\n    this.setState({ student, editMode: false })\r\n  }\r\n  handleCancelUpdate = () => {\r\n    const student = { ...this.state.student }\r\n    student.name = \"\"\r\n    student.id = \"\"\r\n    student.studentID = \"\"\r\n    student.status = false\r\n    student.newPassword = \"\"\r\n    student.prevPassword = \"\"\r\n    student.password = \"\"\r\n    this.setState({ student, editMode: false })\r\n  }\r\n  handleDelete = student => {\r\n    const students = this.state.students.filter(c => c._id !== student._id)\r\n    this.setState({ students })\r\n    const userID = this.context.userID\r\n    const token = this.context.token\r\n    const removeStudent = {\r\n      query: `\r\n      mutation {\r\n        removeStudent(studentID: \"${student._id}\", teacherID: \"${userID}\") {\r\n          _id\r\n          name\r\n          studentID\r\n        }\r\n      }\r\n      `\r\n    }\r\n\r\n    callServer(removeStudent, token, result => {\r\n\r\n    })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    let { name, studentID, password, status } = this.state.student\r\n    if (\r\n      name.trim() === \"\" ||\r\n      studentID.trim() === \"\" ||\r\n      password.trim() === \"\"\r\n    ) {\r\n      toast.error(\"Invalid Credentials\")\r\n    }\r\n    let value = this.context.userID\r\n    const token = this.context.token\r\n    const addStudent = {\r\n      query: `\r\n        mutation {\r\n          addStudent (studentInput : {\r\n            name: \"${name}\",\r\n            status: ${status},\r\n            password: \"${password}\",\r\n            studentID: \"${studentID}\",\r\n            teacherID: \"${value}\",\r\n          }) {\r\n            _id\r\n            name\r\n            studentID\r\n            status\r\n            password\r\n          }\r\n        }\r\n      `\r\n    }\r\n    callServer(addStudent, token, result => {\r\n      if (result.data.addStudent) {\r\n        toast.success(\"Added a new Student\")\r\n      }\r\n      const students = [...this.state.students]\r\n      students.unshift(result.data.addStudent)\r\n      this.setState({ students })\r\n      this.handleCancelUpdate()\r\n      this.handleClose()\r\n    })\r\n  }\r\n\r\n  handleUpdate = e => {\r\n    e.preventDefault()\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    const student = { ...this.state.student }\r\n    const { id, name, studentID, prevPassword, newPassword, status } = student\r\n\r\n    const updateStudent = {\r\n      query: `\r\n        mutation {\r\n          updateStudent (studentUpdateInput : {\r\n            _id: \"${id}\",\r\n            name: \"${name}\",\r\n            status: ${status},\r\n            studentID: \"${studentID}\",\r\n            prevPassword: \"${prevPassword}\",\r\n            newPassword: \"${newPassword}\",\r\n            teacherID: \"${userID}\"\r\n          }) {\r\n            _id\r\n            name\r\n            studentID\r\n            password\r\n            status\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    callServer(updateStudent, token, result => {\r\n      const students = [...this.state.students]\r\n      const {\r\n        _id,\r\n        name,\r\n        studentID,\r\n        password,\r\n        status\r\n      } = result.data.updateStudent\r\n      students.map(student => {\r\n        if (student._id === _id) {\r\n          student.name = name\r\n          student.studentID = studentID\r\n          student.status = status\r\n          student.password = password\r\n        }\r\n        return student\r\n      })\r\n      toast.success(\"Updated\")\r\n      this.setState({ students })\r\n      this.handleCancelUpdate()\r\n    })\r\n  }\r\n\r\n  handleAdd = () => {\r\n    this.setState({ addMode: true })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({ addMode: false, editMode: false, uploadMode: false })\r\n    this.handleCancelUpdate()\r\n  }\r\n  handleFileUpload = () => {\r\n    this.setState({ uploadMode: true })\r\n  }\r\n\r\n  handleAssignStudents = exam => {\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    const students = [...this.state.students]\r\n    let activeStudents = students.filter(student => student.status === true)\r\n\r\n    let studentIDs = []\r\n    activeStudents.map(student => {\r\n      return studentIDs.push(`\"${student._id}\"`)\r\n    })\r\n    const assign_students_to_exam = {\r\n      query: `\r\n      mutation{\r\n        assign_students_to_exam(assignInput: {\r\n          examID: \"${exam._id}\", \r\n          teacherID: \"${userID}\", \r\n          studentIDs : [${studentIDs}]})\r\n      }\r\n      `\r\n    }\r\n    callServer(assign_students_to_exam, token, result => {\r\n      if (result.data) {\r\n        toast.success(`You have assigned ${studentIDs.length} students`)\r\n        this.props.refresh_exams()\r\n      }\r\n    })\r\n  }\r\n\r\n  handleToogleCheckBox = (event, student) => {\r\n    const students = [...this.state.students]\r\n    const found = students.find(element => {\r\n      return element._id === student._id\r\n    })\r\n    if (found) {\r\n      found.status = event.target.checked\r\n    }\r\n    this.setState({ students })\r\n  }\r\n\r\n  countActiveStudents = () => {\r\n    const students = [...this.state.students]\r\n    let count = students.filter(obj => obj.status === true).length\r\n    return `${count}`\r\n  }\r\n  handleSubmitStatus = (e) => {\r\n    e.preventDefault()\r\n    toast.info(\"You cant change this status\")\r\n  }\r\n\r\n  generateRandomNumber = () => {\r\n    return\r\n  }\r\n\r\n  dataExtractor = (data) => {\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    const examID = this.props.exam._id\r\n    if (data) {\r\n      let newStudents = []\r\n      newStudents = data.map(t => {\r\n        return {\r\n          name: t[\"Student Name\"],\r\n          studentID: t[\"Student ID\"],\r\n          status: true,\r\n          password: `${Math.floor(1000 + Math.random() * 9000)}`\r\n        }\r\n      })\r\n      this.setState({ uploadMode: false })\r\n      let newMappedStudents = []\r\n      newStudents.map(t => {\r\n        return newMappedStudents.push(`{\r\n          name : \"${t.name}\",\r\n          studentID: \"${t.studentID}\",\r\n          status: ${t.status},\r\n          password: \"${t.password}\"\r\n        }`)\r\n      })\r\n      const addMultipleStudent = {\r\n        query: `\r\n        mutation {\r\n          addMultipleStudent(teacherID: \"${userID}\", examID: \"${examID}\", multipleStudentInput: [${newMappedStudents}]){\r\n            _id\r\n            name\r\n            studentID\r\n            password\r\n            status\r\n          }\r\n        }\r\n        `\r\n      }\r\n\r\n      callServer(addMultipleStudent, token, result => {\r\n        const newStudents = result.data.addMultipleStudent\r\n        const students = this.state.students\r\n        newStudents.map(t => {\r\n          return students.push(t)\r\n        })\r\n        this.setState({ students })\r\n        toast.success(\"Excel Read Successfull\")\r\n      })\r\n    }\r\n    else {\r\n      toast.error(\"Error Reading File\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      addMode,\r\n      editMode,\r\n      uploadMode,\r\n      students,\r\n      student,\r\n      selectedFileName,\r\n      selectedFile\r\n    } = this.state\r\n    return (\r\n      <div className=\"student-content-container\">\r\n        <StudentControls\r\n          exam={this.props.exam}\r\n          handleAdd={this.handleAdd}\r\n          handleFileUpload={this.handleFileUpload}\r\n          handleAssignStudents={this.handleAssignStudents}\r\n          handleBackToExam={this.props.handleBackToExam}\r\n          handleGoToQuestion={this.props.handleGoToQuestion}\r\n        />\r\n        <StudentTable\r\n          students={students}\r\n          raiseEdit={this.handleEdit}\r\n          raiseDelete={this.handleDelete}\r\n          countActiveStudents={this.countActiveStudents}\r\n          handleToogleCheckBox={this.handleToogleCheckBox}\r\n          handleSubmitStatus={this.handleSubmitStatus}\r\n        />\r\n        {(addMode || editMode || uploadMode) && (\r\n          <StudentForm\r\n            student={student}\r\n            selectedFileName={selectedFileName}\r\n            selectedFile={selectedFile}\r\n            editMode={editMode}\r\n            addMode={addMode}\r\n            uploadMode={uploadMode}\r\n            dataExtractor={this.dataExtractor}\r\n            raiseUpdate={this.handleUpdate}\r\n            raiseClose={this.handleClose}\r\n            raiseSubmit={this.handleSubmit}\r\n            raiseChange={this.handleChange}\r\n            raiseClearState={this.handleClearState}\r\n            raiseUpload={this.handleUpload}\r\n            raiseCancelUpload={this.cancelUpload}\r\n          />\r\n        )}\r\n        {(addMode || editMode || uploadMode) && <Backdrop />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyStudents\r\n","import React, { Component } from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { Link } from \"react-router-dom\"\r\nimport printIcon from \"../../../print.svg\"\r\nimport Backdrop from \"../../common/Backdrop\"\r\n\r\nimport \"./result.css\"\r\n\r\nimport callServer from '../../../http/http';\r\nimport AuthContext from \"../../../context/auth-context\"\r\n\r\nclass Result extends Component {\r\n    static contextType = AuthContext\r\n    state = {\r\n        students: [{\r\n            _id: \"\",\r\n            name: \"\",\r\n            studentID: \"\",\r\n            myMarks: 0,\r\n            answers: [{\r\n                questionIndex: 1,\r\n                studentAnswer: 1\r\n            }]\r\n        }],\r\n        questions: [],\r\n        answer_view_mode: false,\r\n        selected_student: \"\"\r\n    }\r\n    componentDidMount() {\r\n        const sss = [...this.props.exam.submittedStudents]\r\n        const token = this.context.token\r\n        const stdArray = []\r\n        sss.map(s => {\r\n            return stdArray.push(`\"${s._id}\"`)\r\n        })\r\n        const get_answer_by_students = {\r\n            query: `\r\n            query {\r\n                get_answer_by_students (studentIDs : [\r\n                  ${stdArray}\r\n                ]) {\r\n                    _id\r\n                    student {\r\n                        _id\r\n                        name\r\n                        studentID\r\n                    }\r\n                    answers {\r\n                        questionIndex\r\n                        studentAnswer\r\n                    }\r\n                    myMarks\r\n                }\r\n              }\r\n            `\r\n        }\r\n        const get_question_by_exam = {\r\n            query: `\r\n            query {\r\n                get_question_by_exam (examID : \"${this.props.exam._id}\") {\r\n                    _id\r\n                    questions {\r\n                        id\r\n                        text\r\n                        mark\r\n                        image\r\n                        options {\r\n                            id\r\n                            text\r\n                            answer\r\n                        }\r\n                    }\r\n                }\r\n              }\r\n            `\r\n        }\r\n        callServer(get_question_by_exam, token, result => {\r\n            this.setState({ questions: result.data.get_question_by_exam.questions })\r\n        })\r\n        callServer(get_answer_by_students, token, result => {\r\n            if (result.data) {\r\n                console.log(result.data.get_answer_by_students)\r\n                const full_answers = result.data.get_answer_by_students\r\n                let students = []\r\n                full_answers.map(element => {\r\n                    let student = {\r\n                        _id: element.student._id,\r\n                        name: element.student.name,\r\n                        studentID: element.student.studentID,\r\n                        myMarks: element.myMarks,\r\n                        answers: []\r\n                    }\r\n                    element.answers.map(ans => {\r\n                        let answer = {\r\n                            questionIndex: ans.questionIndex,\r\n                            studentAnswer: ans.studentAnswer\r\n                        }\r\n                        return student.answers.push(answer)\r\n                    })\r\n                    return students.push(student)\r\n                })\r\n                this.setState({ students })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    handleClose = () => {\r\n        this.setState({ answer_view_mode: false, selected_student: \"\" })\r\n    }\r\n\r\n    handleViewResult = (studentID) => {\r\n        this.setState({ answer_view_mode: true, selected_student: studentID })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const {\r\n            title,\r\n            code,\r\n            totalMarks,\r\n        } = this.props.exam\r\n        const students = this.state.students\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"result-container-all\">\r\n                <div className=\"result-container\" ref={el => (this.componentRef = el)}>\r\n                    <div className=\"r-heading\">\r\n                        <div className=\"r-left\">\r\n                            <ReactToPrint\r\n                                trigger={() => <Link to=\"#\"><img className=\"s-print\" src={printIcon} alt=\"Print\" /></Link>}\r\n                                content={() => this.componentRef}\r\n                            />\r\n                        </div>\r\n                        <div className=\"r-middle\">\r\n                            <h1>{`Result of ${title}`}</h1>\r\n                            <h2>{`Exam Code ${code}`}</h2>\r\n                        </div>\r\n                        <div className=\"r-right\">\r\n\r\n                        </div>\r\n                    </div>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Student ID</th>\r\n                                <th>My Marks</th>\r\n                                <th>Full Marks</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {students.map(s => (\r\n                                <tr onClick={() => this.handleViewResult(s._id)} className=\"result-table\" key={s._id}>\r\n                                    <td>{s.name}</td>\r\n                                    <td>{s.studentID}</td>\r\n                                    <td>{s.myMarks}</td>\r\n                                    <td>{totalMarks}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                {this.state.answer_view_mode &&\r\n                    <div className=\"student_result\">\r\n                        <div className=\"student_result_heading\">\r\n                            <span className=\"close-icon\" onClick={this.handleClose}>&#10006;</span>\r\n                            <h2>Students Result</h2>\r\n                        </div>\r\n                        <div className=\"student_result_info\">\r\n                            asasas\r\n                        </div>\r\n                        <div className=\"student_result_body\">\r\n                            {this.state.questions.map((q, i) => (\r\n                                <div key={i} className=\"std-ans-single\">\r\n                                    <div className=\"std-ans-serial\">\r\n                                        <h3>{q.id}.</h3>\r\n                                    </div>\r\n                                    <div className=\"std-ans-data\">\r\n                                        <div className=\"std-ans-data-title\">\r\n                                            <h3>{q.text}</h3>\r\n                                        </div>\r\n                                        <div className=\"std-ans-data-box\">\r\n                                            <div className=\"std-ans-data-options\">\r\n                                                {q.options.map((option, k) => (\r\n                                                    <div key={k} className=\"std-ans-data-option\">\r\n                                                        <div className=\"std-ans-data-option-no\">\r\n                                                            <h3>{option.id}.</h3>\r\n                                                        </div>\r\n                                                        <div className=\"std-ans-data-option-text\">\r\n                                                            <h3>{option.text}</h3>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                ))}\r\n                                            </div>\r\n                                            <div className=\"std-ans-data-image\">\r\n                                                <img src={q.image} alt=\"\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"std-ans-mark\">\r\n                                        <h3>{q.mark}</h3>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    </div>}\r\n                {this.state.answer_view_mode && <Backdrop />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Result;","import React, { Component } from \"react\"\r\nimport Tabs from \"../../common/Tabs\"\r\nimport Panel from \"../../common/Panel\"\r\nimport ExamDetails from \"./ExamDetails\"\r\nimport Question from \"./Question\"\r\nimport MyStudents from \"./MyStudents\"\r\nimport Result from \"./Result\"\r\nimport AuthContext from \"../../../context/auth-context\"\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass MyExam extends Component {\r\n  static contextType = AuthContext\r\n  state = {\r\n    selected: 0,\r\n    examMode: false\r\n  }\r\n\r\n  handleQuestion = e => {\r\n    this.setState({ selected: 2 })\r\n    this.props.switchToQuestion(e)\r\n  }\r\n  handleStudent = e => {\r\n    this.setState({ selected: 1 })\r\n    this.props.switchToStudents(e)\r\n  }\r\n  handleResult = e => {\r\n    this.setState({ selected: 3 })\r\n    this.props.switchToResult(e)\r\n  }\r\n  handleTabInputChange = i => {\r\n    this.setState({ selected: 0 })\r\n  }\r\n  handleBackToExam = e => {\r\n    this.setState({ selected: 0 })\r\n    this.props.switchToExams()\r\n  }\r\n  handleGoToQuestion = e => {\r\n    this.setState({ selected: 2 })\r\n    this.props.switchToQuestion(e)\r\n  }\r\n\r\n  handleStartExam = (e) => {\r\n    console.log(\"enter start exam\")\r\n    if (e.status) {\r\n      this.setState({ examMode: true })\r\n      localStorage.setItem(\"exam_id\", e._id)\r\n      this.context.setExam(e._id)\r\n      this.props.history.push(\"/api/examRoom\")\r\n    } else {\r\n      toast.info(\"Exam status must be true\")\r\n    }\r\n  }\r\n  enterOngoingExam = (e) => {\r\n    console.log(\"enter on going exam\")\r\n    if (e.status) {\r\n      this.setState({ examMode: true })\r\n      this.props.history.push(\"/api/examRoom\")\r\n    } else {\r\n      toast.info(\"Exam status must be true\")\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Tabs\r\n        selected={this.state.selected}\r\n        handleTabInputChange={this.handleTabInputChange}\r\n      >\r\n        <Panel title=\"Exams\">\r\n          <ExamDetails\r\n            exam={this.props.exam}\r\n            exams={this.props.exams}\r\n            semester={this.props.semester}\r\n            year={this.props.year}\r\n            handleToogleCheckBoxExam={this.props.handleToogleCheckBoxExam}\r\n            handleUpdate={this.props.handleUpdate}\r\n            handleAddExam={this.props.handleAddExam}\r\n            handleDeleteExam={this.props.handleDeleteExam}\r\n            handleExamEdit={this.props.handleExamEdit}\r\n            clearState={this.props.clearState}\r\n            onInputChange={this.props.onInputChange}\r\n            handleQuestion={this.handleQuestion}\r\n            handleStudent={this.handleStudent}\r\n            handleResult={this.handleResult}\r\n            handleSemesterChange={this.props.handleSemesterChange}\r\n            handleYearChange={this.props.handleYearChange}\r\n            handleStartExam={this.handleStartExam}\r\n            enterOngoingExam={this.enterOngoingExam}\r\n          />\r\n        </Panel>\r\n        <Panel title=\"Students\">\r\n          <MyStudents\r\n            exam={this.props.exam}\r\n            handleGoToQuestion={this.handleGoToQuestion}\r\n            handleBackToExam={this.handleBackToExam}\r\n            reresh_exams={this.props.refresh_exams}\r\n          />\r\n        </Panel>\r\n        <Panel title=\"Question\">\r\n          <Question exam={this.props.exam} />\r\n        </Panel>\r\n        <Panel title=\"Result\">\r\n          <Result exam={this.props.exam} />\r\n        </Panel>\r\n      </Tabs>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyExam\r\n","import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport Input from \"../common/InputField\";\r\nimport AuthContext from \"../../context/auth-context\";\r\nimport callServer from \"../../http/http\";\r\n\r\nclass ChangePassword extends Component {\r\n    state = {\r\n        teacher: {\r\n            prevPassword: \"\",\r\n            newPassword: \"\",\r\n            confirmNewPassword: \"\"\r\n        },\r\n        updated: false\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    handleChange = ({ currentTarget: input }) => {\r\n        const teacher = { ...this.state.teacher };\r\n        teacher[input.name] = input.value;\r\n        this.setState({ teacher });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        const teacher = { ...this.state.teacher };\r\n        let prevPassword = teacher.prevPassword;\r\n        let newPassword = teacher.newPassword;\r\n        let confirmNewPassword = teacher.confirmNewPassword;\r\n        if (prevPassword === \"\" || newPassword === \"\" || confirmNewPassword === \"\") {\r\n            toast.error(\"Invalid Credentials\");\r\n            this.handleClearState()\r\n            return\r\n        }\r\n        if (confirmNewPassword !== newPassword) {\r\n            toast.error(\"Password Mismatch\");\r\n            this.handleClearState()\r\n            return\r\n        }\r\n        let teacherID = this.context.userID;\r\n        const changeTeacherPassword = {\r\n            query: `\r\n            mutation {\r\n            changeTeacherPassword (prevPassword: \"${prevPassword}\", newPassword: \"${newPassword}\", teacherID: \"${teacherID}\") {\r\n                _id\r\n                name\r\n            }\r\n            }\r\n        `\r\n        };\r\n        const token = this.context.token;\r\n        callServer(changeTeacherPassword, token, (result) => {\r\n            console.log(result)\r\n            toast.success(\"Password Update Successful\");\r\n            const teacher = { ...this.state.teacher };\r\n            this.handleClearState()\r\n            this.setState({ teacher });\r\n        })\r\n    };\r\n\r\n    handleClearState = (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        const teacher = { ...this.state.teacher };\r\n        teacher.prevPassword = \"\";\r\n        teacher.newPassword = \"\";\r\n        teacher.confirmNewPassword = \"\";\r\n        this.setState({ teacher })\r\n    }\r\n\r\n    render() {\r\n        const { prevPassword, newPassword, confirmNewPassword } = this.state.teacher;\r\n        return (\r\n            <div className=\"change_pass_container\">\r\n                <form onSubmit={this.handleSubmit} className=\"form-control\">\r\n                    <Input\r\n                        name=\"prevPassword\"\r\n                        value={prevPassword}\r\n                        label=\"Current Password\"\r\n                        onChange={this.handleChange}\r\n                        type=\"password\"\r\n                    />\r\n                    <Input\r\n                        name=\"newPassword\"\r\n                        value={newPassword}\r\n                        label=\"New Password\"\r\n                        onChange={this.handleChange}\r\n                        type=\"password\"\r\n                    />\r\n                    <Input\r\n                        name=\"confirmNewPassword\"\r\n                        value={confirmNewPassword}\r\n                        label=\"Confirm New Password\"\r\n                        onChange={this.handleChange}\r\n                        type=\"password\"\r\n                    />\r\n                    <div className=\"button-group\">\r\n                        <button type=\"submit\" className=\"form-button\">\r\n                            Update\r\n                        </button>\r\n                        <button className=\"form-button\" onClick={this.handleClearState}>\r\n                            Clear\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChangePassword;\r\n","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\nimport { Switch, Route } from \"react-router-dom\"\r\nimport Sidenav from \"./Sidenav\"\r\nimport MyExam from \"./Exam/MyExam\"\r\nimport ChangePassword from \"./ChangePassword\"\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport callServer from \"../../http/http\"\r\n\r\nclass Teacher extends Component {\r\n  static contextType = AuthContext\r\n\r\n  state = {\r\n    semester: \"SPRING\",\r\n    year: \"2019\",\r\n    exams: [],\r\n    filteredExams: [],\r\n    exam: {\r\n      id: \"\",\r\n      students: [],\r\n      loggedInStudents: [],\r\n      submittedStudent: [],\r\n      title: \"\",\r\n      code: \"\",\r\n      password: \"\",\r\n      prevPassword: \"\",\r\n      newPassword: \"\",\r\n      totalMarks: 0,\r\n      examDate: \"\",\r\n      totalTimeInMin: 0,\r\n      status: false,\r\n      courseTitle: \"\",\r\n      courseCode: \"\",\r\n      semester: \"SPRING\",\r\n      year: 2019\r\n    }\r\n  }\r\n  get_exams = () => {\r\n    const token = this.context.token\r\n    let value = this.context.userID\r\n    const get_all_exams = {\r\n      query: `\r\n        query {\r\n          get_all_exams (teacherID: \"${value}\")  {\r\n            title\r\n            _id\r\n            code\r\n            password\r\n            totalMarks\r\n            examDate\r\n            totalTimeInMin\r\n            status\r\n            semester\r\n            loggedInStudents {\r\n              _id\r\n            }\r\n            submittedStudents {\r\n              _id\r\n            }\r\n            year\r\n            course{\r\n              title\r\n              code\r\n            }\r\n            students {\r\n              _id\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n    callServer(get_all_exams, token, result => {\r\n      const exams = result.data.get_all_exams\r\n      const { semester, year } = this.state\r\n      const filteredExams = exams.filter(e => (e.semester === semester && Number(e.year) === Number(year)))\r\n      this.setState({ exams, filteredExams })\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.get_exams()\r\n  }\r\n\r\n  handleSemesterChange = ({ currentTarget: input }) => {\r\n    const exams = this.state.exams\r\n    const { year } = this.state\r\n    const newExams = exams.filter(e => (e.semester === input.value && e.year === year))\r\n    this.setState({ filteredExams: newExams, semester: input.value })\r\n  }\r\n  handleYearChange = ({ currentTarget: input }) => {\r\n    const exams = this.state.exams\r\n    const { semester } = this.state\r\n    const newExams = exams.filter(e => (e.semester === semester && e.year === input.value))\r\n    this.setState({ filteredExams: newExams, year: input.value })\r\n  }\r\n\r\n  onInputChange = exam => {\r\n    this.setState({ exam })\r\n  }\r\n  handleAddExam = () => {\r\n    let value = this.context.userID\r\n    const token = this.context.token\r\n    let {\r\n      title,\r\n      code,\r\n      password,\r\n      totalMarks,\r\n      examDate,\r\n      totalTimeInMin,\r\n      status,\r\n      courseCode,\r\n      courseTitle,\r\n      semester,\r\n      year\r\n    } = this.state.exam\r\n    const addExam = {\r\n      query: `\r\n      mutation {\r\n          addExam(examInput: {\r\n            title: \"${title}\", \r\n            code: \"${code}\",\r\n            password: \"${password}\",\r\n            totalMarks: ${totalMarks},\r\n            examDate: \"${examDate}\",\r\n            totalTimeInMin: ${totalTimeInMin},\r\n            status: ${status},\r\n            course: {\r\n              title: \"${courseTitle}\",\r\n              code: \"${courseCode}\"\r\n            }\r\n            teacher: \"${value}\",\r\n            semester: \"${semester}\",\r\n            year: ${year}\r\n          }){\r\n            _id\r\n            title\r\n            code\r\n            password\r\n            totalMarks\r\n            examDate\r\n            totalTimeInMin\r\n            status\r\n            semester\r\n            year\r\n            course {\r\n                title\r\n                code\r\n            }\r\n          }\r\n        }\r\n  `\r\n    }\r\n    callServer(addExam, token, result => {\r\n      console.log(result)\r\n      let exam = result.data.addExam\r\n\r\n      if (exam) {\r\n        toast.success(\"Added a new Exam\")\r\n        const exams = this.state.exams\r\n        const { semester, year } = this.state\r\n        console.log(semester)\r\n        console.log(exam.semester)\r\n        const filteredExams = this.state.filteredExams\r\n        if (exam.semester === semester && exam.year === Number(year)) {\r\n          filteredExams.push(exam)\r\n        }\r\n        exams.push(exam)\r\n        this.setState({ exams, filteredExams })\r\n      }\r\n    })\r\n  }\r\n  handleExamEdit = t => {\r\n    const exam = this.state.exam\r\n    exam.id = t._id\r\n    exam.title = t.title\r\n    exam.code = t.code\r\n    exam.status = t.status\r\n    exam.totalMarks = t.totalMarks\r\n    exam.totalTimeInMin = t.totalTimeInMin\r\n    exam.examDate = t.examDate\r\n    exam.semester = t.semester\r\n    exam.year = t.year\r\n    exam.courseCode = t.course.code\r\n    exam.courseTitle = t.course.title\r\n    this.setState({ exam })\r\n  }\r\n  handleUpdate = e => {\r\n    e.preventDefault()\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    const {\r\n      id,\r\n      title,\r\n      code,\r\n      prevPassword,\r\n      newPassword,\r\n      status,\r\n      totalMarks,\r\n      totalTimeInMin,\r\n      examDate,\r\n      semester,\r\n      year,\r\n      courseTitle,\r\n      courseCode\r\n    } = this.state.exam\r\n\r\n    const updateExam = {\r\n      query: `\r\n        mutation {\r\n          updateExam (examUpdateInput : {\r\n            _id: \"${id}\",\r\n            title: \"${title}\",\r\n            code: \"${code}\",\r\n            prevPassword: \"${prevPassword}\",\r\n            newPassword: \"${newPassword}\",\r\n            status: ${status},\r\n            totalMarks: ${totalMarks},\r\n            totalTimeInMin: ${totalTimeInMin},\r\n            examDate: \"${examDate}\",\r\n            semester: \"${semester}\",\r\n            year: \"${year}\",\r\n            course: {\r\n              title: \"${courseTitle}\",\r\n              code: \"${courseCode}\",\r\n            }\r\n            teacherID: \"${userID}\"\r\n          }) {\r\n            _id\r\n            title\r\n            code\r\n            password\r\n            totalMarks\r\n            examDate\r\n            totalTimeInMin\r\n            status\r\n            semester\r\n            year\r\n            course{\r\n              title\r\n              code\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    callServer(updateExam, token, result => {\r\n      const exams = [...this.state.exams]\r\n      const {\r\n        _id,\r\n        title,\r\n        code,\r\n        password,\r\n        status,\r\n        totalMarks,\r\n        totalTimeInMin,\r\n        examDate,\r\n        course,\r\n        semester,\r\n        year\r\n      } = result.data.updateExam\r\n      exams.map(exam => {\r\n        if (exam._id === _id) {\r\n          exam.id = _id\r\n          exam.title = title\r\n          exam.code = code\r\n          exam.password = password\r\n          exam.status = status\r\n          exam.totalMarks = totalMarks\r\n          exam.totalTimeInMin = totalTimeInMin\r\n          exam.examDate = examDate\r\n          exam.semester = semester\r\n          exam.year = year\r\n          exam.courseCode = course.code\r\n          exam.courseTitle = course.title\r\n        }\r\n        return exam\r\n      })\r\n\r\n      toast.success(`Updated ${title}`)\r\n      this.setState({ exams })\r\n      this.handleClearState()\r\n    })\r\n  }\r\n  handleClearState = e => {\r\n    if (e) {\r\n      e.preventDefault()\r\n    }\r\n    const exam = { ...this.state.exam }\r\n    exam.id = \"\"\r\n    exam.title = \"\"\r\n    exam.code = \"\"\r\n    exam.password = \"\"\r\n    exam.prevPassword = \"\"\r\n    exam.newPassword = \"\"\r\n    exam.status = false\r\n    exam.totalMarks = 0\r\n    exam.totalTimeInMin = 0\r\n    exam.examDate = \"\"\r\n    exam.courseCode = \"\"\r\n    exam.courseTitle = \"\"\r\n    exam.semester = \"SPRING\"\r\n    exam.year = 2019\r\n    this.setState({ exam })\r\n  }\r\n  handleDeleteExam = exam => {\r\n    const filteredExams = this.state.filteredExams.filter(c => c._id !== exam._id)\r\n    this.setState({ filteredExams })\r\n    const userID = this.context.userID\r\n    const token = this.context.token\r\n    const removeExam = {\r\n      query: `\r\n      mutation {\r\n        removeExam(examID: \"${exam._id}\", teacherID: \"${userID}\") {\r\n          _id\r\n          title\r\n        }\r\n      }\r\n      `\r\n    }\r\n\r\n    callServer(removeExam, token, result => {\r\n      toast.success(`Deleted ${result.data.removeExam.title}`)\r\n    })\r\n  }\r\n  refresh_exams = () => {\r\n    console.log(\"refresh-exam reached\")\r\n    this.get_exams()\r\n  }\r\n\r\n  switchToQuestion = e => {\r\n    this.setState({ exam: e })\r\n  }\r\n  switchToStudents = e => {\r\n    this.setState({ exam: e })\r\n  }\r\n  switchToResult = e => {\r\n    this.setState({ exam: e })\r\n  }\r\n  switchToExams = () => {\r\n    this.handleClearState()\r\n  }\r\n  handleToogleCheckBoxExam = (event, exam) => {\r\n    const token = this.context.token\r\n    const exams = [...this.state.exams]\r\n    const found = exams.find(element => {\r\n      return element._id === exam._id\r\n    })\r\n    if (found) {\r\n      found.status = event.target.checked\r\n    }\r\n    this.setState({ exams })\r\n    const changeExamStatus = {\r\n      query: `\r\n      mutation {\r\n        changeExamStatus(status: ${found.status}, examID: \"${exam._id}\")\r\n      }\r\n      `\r\n    }\r\n    callServer(changeExamStatus, token, result => { })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <Sidenav />\r\n        <div className=\"content-container\">\r\n          <Switch>\r\n            <Route\r\n              path=\"/api/teacher/change_password\"\r\n              component={ChangePassword}\r\n            />\r\n            <Route\r\n              path=\"/api/teacher/myExam\"\r\n              render={props => (\r\n                <MyExam\r\n                  {...props}\r\n                  exam={this.state.exam}\r\n                  exams={this.state.filteredExams}\r\n                  semester={this.state.semester}\r\n                  year={this.state.year}\r\n                  handleUpdate={this.handleUpdate}\r\n                  handleAddExam={this.handleAddExam}\r\n                  handleDeleteExam={this.handleDeleteExam}\r\n                  handleExamEdit={this.handleExamEdit}\r\n                  clearState={this.handleClearState}\r\n                  onInputChange={this.onInputChange}\r\n                  handleSemesterChange={this.handleSemesterChange}\r\n                  handleToogleCheckBoxExam={this.handleToogleCheckBoxExam}\r\n                  handleYearChange={this.handleYearChange}\r\n                  switchToQuestion={this.switchToQuestion}\r\n                  switchToStudents={this.switchToStudents}\r\n                  switchToResult={this.switchToResult}\r\n                  switchToExams={this.switchToExams}\r\n                  refresh_exams={this.refresh_exams}\r\n                />\r\n              )}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Teacher\r\n","import React, { Component } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport Input from \"../common/InputField\"\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport callServer from \"../../http/http\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nclass LoginForm extends Component {\r\n  state = {\r\n    account: { username: \"\", password: \"\" },\r\n    isLogin: true\r\n  }\r\n\r\n  static contextType = AuthContext\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const account = { ...this.state.account }\r\n    account[input.name] = input.value\r\n    this.setState({ account })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n\r\n    const account = { ...this.state.account }\r\n    let username = account.username\r\n    let password = account.password\r\n\r\n    const teacherLogin = {\r\n      query: `\r\n        query {\r\n          teacherLogin (name: \"${username}\", password: \"${password}\") {\r\n            token\r\n          }\r\n        }\r\n      `\r\n    }\r\n    const token = \"\"\r\n    callServer(teacherLogin, token, resData => {\r\n      try {\r\n        let { token } = resData.data.teacherLogin\r\n        if (token) {\r\n          const decoded = jwt.decode(token)\r\n          const {\r\n            teacherID: userID,\r\n            name: username,\r\n            accessType,\r\n            exp: tokenExpiration\r\n          } = decoded\r\n          localStorage.setItem(\"token\", token)\r\n          localStorage.setItem(\"userID\", userID)\r\n          localStorage.setItem(\"username\", username)\r\n          localStorage.setItem(\"accessType\", accessType)\r\n          localStorage.setItem(\"tokenExpiration\", tokenExpiration)\r\n          this.context.login(\r\n            token,\r\n            userID,\r\n            username,\r\n            accessType,\r\n            tokenExpiration\r\n          )\r\n          this.props.history.push(\"/api/teacher/myExam\")\r\n          toast.success(\"Successfully logged in\")\r\n        }\r\n      } catch (ex) {\r\n        toast.error(resData.errors[0].message)\r\n      }\r\n    })\r\n  }\r\n  handleClearState = e => {\r\n    e.preventDefault()\r\n    const account = { ...this.state.account }\r\n    account[\"username\"] = \"\"\r\n    account[\"password\"] = \"\"\r\n    this.setState({ account })\r\n  }\r\n\r\n  render() {\r\n    const { account } = this.state\r\n\r\n    return (\r\n      <div className=\"login_form\">\r\n        <h2>Teacher's Login</h2>\r\n        <form onSubmit={this.handleSubmit} className=\"form-control\">\r\n          <Input\r\n            name=\"username\"\r\n            value={account.username}\r\n            label=\"Username\"\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n          />\r\n          <Input\r\n            name=\"password\"\r\n            value={account.password}\r\n            label=\"Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <div className=\"form-button-group\">\r\n            <button type=\"submit\" className=\"form-button\">\r\n              Login\r\n            </button>\r\n            <button className=\"form-button\" onClick={this.handleClearState}>\r\n              Clear\r\n            </button>\r\n            <Link to=\"/\">\r\n              <button className=\"form-button\">Back</button>\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { Component } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nimport Uploader from \"../common/Uploader\"\r\nimport AuthContext from \"../../context/auth-context\"\r\nimport Input from \"../common/InputField\"\r\nimport Select from \"../common/Select\"\r\nimport SwitchToogle from \"../common/SwitchToogle\"\r\nimport callServer from \"../../http/http\"\r\nimport Backdrop from \"../common/Backdrop\"\r\n\r\n\r\nclass MyTeachers extends Component {\r\n  state = {\r\n    selectedFileName: \"\",\r\n    selectedFile: {},\r\n    teachers: [],\r\n    teacher: {\r\n      id: \"\",\r\n      name: \"\",\r\n      dept: \"CSE\",\r\n      status: false,\r\n      password: \"\",\r\n      prevPassword: \"\",\r\n      newPassword: \"\"\r\n    },\r\n    editMode: false,\r\n    uploadMode: false,\r\n    addMode: false,\r\n    updated: false,\r\n    options: [\r\n      { _id: 1, name: \"CSE\" },\r\n      { _id: 2, name: \"BBA\" },\r\n      { _id: 3, name: \"FOOD\" },\r\n      { _id: 4, name: \"LAW\" }\r\n    ],\r\n    errors: {}\r\n  }\r\n  static contextType = AuthContext\r\n\r\n  componentDidMount() {\r\n    const token = this.context.token\r\n    let value = this.context.userID\r\n    const get_all_teachers = {\r\n      query: `\r\n        query {\r\n          get_all_teachers (adminID: \"${value}\") {\r\n            _id\r\n            name\r\n            password\r\n            deptCode\r\n            status\r\n          }\r\n        }\r\n      `\r\n    }\r\n    callServer(get_all_teachers, token, result => {\r\n      const teachers = [...this.state.teachers]\r\n      result.data.get_all_teachers.map(data => {\r\n        return teachers.push(data)\r\n      })\r\n      this.setState({ teachers })\r\n    })\r\n  }\r\n  cancelUpload = () => {\r\n    this.setState({ selectedFileName: \"\" })\r\n  }\r\n  dataExtractor = (data) => {\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    if (data) {\r\n      let newTeachers = []\r\n      newTeachers = data.map(t => {\r\n        return {\r\n          name: t[\"Teacher Name\"],\r\n          deptCode: t[\"Department\"],\r\n          status: true,\r\n          password: \"1234\"\r\n        }\r\n      })\r\n      this.setState({ uploadMode: false })\r\n      let newMappedTeachers = []\r\n      newTeachers.map(t => {\r\n        return newMappedTeachers.push(`{\r\n          name : \"${t.name}\",\r\n          deptCode: \"${t.deptCode}\",\r\n          status: ${t.status},\r\n          password: \"${t.password}\"\r\n        }`)\r\n      })\r\n      const addMultipleTeacher = {\r\n        query: `\r\n        mutation {\r\n          addMultipleTeacher(adminID: \"${userID}\", multipleTeacherInput: [${newMappedTeachers}]){\r\n            _id\r\n            name\r\n            password\r\n            status\r\n            deptCode\r\n          }\r\n        }\r\n        `\r\n      }\r\n\r\n      callServer(addMultipleTeacher, token, result => {\r\n        const newTeachers = result.data.addMultipleTeacher\r\n        const teachers = this.state.teachers\r\n        newTeachers.map(t => {\r\n          return teachers.push(t)\r\n        })\r\n        this.setState({ teachers })\r\n        toast.success(\"Excel Read Successfull\")\r\n      })\r\n\r\n    }\r\n    else {\r\n      toast.error(\"Error Reading File\")\r\n    }\r\n  }\r\n\r\n  handleUpload = e => {\r\n    const files = Array.from(e.target.files)\r\n    if (files && files[0])\r\n      this.setState({ selectedFileName: files[0].name, selectedFile: files[0] })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    const teacher = { ...this.state.teacher }\r\n    let name = teacher.name\r\n    let dept = teacher.dept\r\n    let status = teacher.status\r\n    let password = teacher.password\r\n    let value = this.context.userID\r\n    const token = this.context.token\r\n    const addTeacher = {\r\n      query: `\r\n        mutation {\r\n          addTeacher (teacherInput : {\r\n            name: \"${name}\",\r\n            password: \"${password}\",\r\n            deptCode: \"${dept}\",\r\n            adminID: \"${value}\",\r\n            status: ${status}\r\n          }) {\r\n            _id\r\n            name\r\n            password\r\n            deptCode\r\n            status\r\n          }\r\n        }\r\n      `\r\n    }\r\n    callServer(addTeacher, token, result => {\r\n      toast.success(\"Added a new Teacher\")\r\n      const teachers = [...this.state.teachers]\r\n      teachers.unshift(result.data.addTeacher)\r\n      this.setState({ teachers })\r\n      this.handleClose()\r\n    })\r\n  }\r\n\r\n  handleDelete = teacher => {\r\n    const teachers = this.state.teachers.filter(c => c._id !== teacher._id)\r\n    this.setState({ teachers })\r\n    const userID = this.context.userID\r\n    const token = this.context.token\r\n    const removeTeacher = {\r\n      query: `\r\n      mutation {\r\n        removeTeacher(teacherID: \"${teacher._id}\", adminID: \"${userID}\") {\r\n          _id\r\n          name\r\n        }\r\n      }\r\n      `\r\n    }\r\n\r\n    callServer(removeTeacher, token, result => {\r\n\r\n    })\r\n  }\r\n\r\n  handleEdit = t => {\r\n    const teacher = { ...this.state.teacher }\r\n    teacher.id = t._id\r\n    teacher.name = t.name\r\n    teacher.dept = t.deptCode\r\n    teacher.status = t.status\r\n    teacher.password = \"\"\r\n    const mode = this.state.editMode\r\n    this.setState({ teacher, editMode: !mode })\r\n  }\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const teacher = { ...this.state.teacher }\r\n    teacher[input.name] = input.value\r\n    this.setState({ teacher })\r\n  }\r\n\r\n  toogleCheckBox = e => {\r\n    const teacher = { ...this.state.teacher }\r\n    teacher.status = e.target.checked\r\n    this.setState({ teacher })\r\n  }\r\n  handleSaveNewTeachers = () => {\r\n    console.log(\"called\")\r\n  }\r\n\r\n  handleClearState = e => {\r\n    if (e) {\r\n      e.preventDefault()\r\n    }\r\n    const teacher = { ...this.state.teacher }\r\n    teacher.name = \"\"\r\n    teacher.id = \"\"\r\n    teacher.dept = \"CSE\"\r\n    teacher.status = false\r\n    teacher.password = \"\"\r\n    teacher.newPassword = \"\"\r\n    teacher.prevPassword = \"\"\r\n    this.setState({ teacher, editMode: false })\r\n  }\r\n  handleUpdate = e => {\r\n    e.preventDefault()\r\n    const token = this.context.token\r\n    const userID = this.context.userID\r\n    const teacher = { ...this.state.teacher }\r\n    const { id, name, status, dept, prevPassword, newPassword } = teacher\r\n\r\n    if (prevPassword !== newPassword) {\r\n      toast.error(\"Password Mismatch\")\r\n      return\r\n    }\r\n\r\n    const updateTeacher = {\r\n      query: `\r\n        mutation {\r\n          updateTeacher (teacherUpdateInput : {\r\n            _id: \"${id}\",\r\n            name: \"${name}\",\r\n            deptCode: \"${dept}\",\r\n            status: ${status},\r\n            prevPassword: \"${prevPassword}\",\r\n            newPassword: \"${newPassword}\",\r\n            adminID: \"${userID}\"\r\n          }) {\r\n            _id\r\n            name\r\n            deptCode\r\n            status\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    callServer(updateTeacher, token, result => {\r\n      console.log(result)\r\n      const teachers = [...this.state.teachers]\r\n      const { _id, name, deptCode, status } = result.data.updateTeacher\r\n      teachers.map(teacher => {\r\n        if (teacher._id === _id) {\r\n          teacher.name = name\r\n          teacher.status = status\r\n          teacher.deptCode = deptCode\r\n        }\r\n        return teacher\r\n      })\r\n      toast.success(\"Updated\")\r\n      this.handleClearState()\r\n    })\r\n  }\r\n\r\n  handleAdd = () => {\r\n    this.setState({ addMode: true })\r\n  }\r\n\r\n  handleClose = () => {\r\n    this.setState({ addMode: false, editMode: false, uploadMode: false })\r\n    this.handleClearState()\r\n  }\r\n  handleFileUpload = () => {\r\n    this.setState({ uploadMode: true })\r\n  }\r\n  handleStatusChange = (event, teacher) => {\r\n    const token = this.context.token\r\n    const teachers = [...this.state.teachers]\r\n    const found = teachers.find(element => {\r\n      return element._id === teacher._id\r\n    })\r\n    if (found) {\r\n      found.status = event.target.checked\r\n    }\r\n    this.setState({ teachers })\r\n    const updateTeacherStatus = {\r\n      query: `\r\n      mutation {\r\n        updateTeacherStatus(status: ${found.status}, teacherID: \"${teacher._id}\")\r\n      }\r\n      `\r\n    }\r\n    callServer(updateTeacherStatus, token, result => {\r\n      console.log(result.data)\r\n      if (result.data.updateTeacherStatus) {\r\n        toast.success(\"Success\")\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      password,\r\n      status,\r\n      prevPassword,\r\n      newPassword\r\n    } = this.state.teacher\r\n    const { editMode, addMode, uploadMode } = this.state\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"student_controls\">\r\n          <h2>My Teachers</h2>\r\n          <button onClick={this.handleAdd} className=\"button-green\">\r\n            Add\r\n          </button>\r\n          <button onClick={this.handleFileUpload} className=\"button-green\">\r\n            Upload\r\n          </button>\r\n        </div>\r\n        <div className=\"my_teachers_table\">\r\n          <table>\r\n            <caption className=\"table-title\">My Listed Teachers</caption>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Department</th>\r\n                <th>Password</th>\r\n                <th>Status</th>\r\n                <th />\r\n                <th />\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.teachers.map(t => (\r\n                <tr key={t._id}>\r\n                  <td>{t.name}</td>\r\n                  <td>{t.deptCode}</td>\r\n                  <td>{t.password}</td>\r\n                  <td><SwitchToogle\r\n                    onChange={(e) => this.handleStatusChange(e, t)}\r\n                    status={t.status}\r\n                  /></td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => this.handleEdit(t)}\r\n                      className=\"button-green\"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      onClick={() => this.handleDelete(t)}\r\n                      className=\"button-red\"\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        {(addMode || editMode) && !uploadMode && (\r\n          <div className=\"add_data_form\">\r\n            <span className=\"close-icon\" onClick={this.handleClose}>\r\n              &#10006;\r\n            </span>\r\n            <h2>{editMode ? \"Update Teacher\" : \"Add Teacher\"}</h2>\r\n            <form\r\n              onSubmit={editMode ? this.handleUpdate : this.handleSubmit}\r\n              className=\"form-control\"\r\n            >\r\n              <Input\r\n                name=\"name\"\r\n                value={name}\r\n                label=\"Name\"\r\n                onChange={this.handleChange}\r\n                type=\"text\"\r\n              />\r\n              <Select\r\n                name=\"dept\"\r\n                label=\"Department\"\r\n                onChange={this.handleChange}\r\n                options={this.state.options}\r\n                value={this.state.teacher.dept}\r\n              />\r\n              {!editMode && (\r\n                <Input\r\n                  name=\"password\"\r\n                  value={password}\r\n                  label=\"Password\"\r\n                  onChange={this.handleChange}\r\n                  type=\"password\"\r\n                />\r\n              )}\r\n              {editMode && (\r\n                <React.Fragment>\r\n                  <Input\r\n                    name=\"prevPassword\"\r\n                    value={prevPassword}\r\n                    label=\"New Password\"\r\n                    onChange={this.handleChange}\r\n                    type=\"password\"\r\n                  />\r\n                  <Input\r\n                    name=\"newPassword\"\r\n                    value={newPassword}\r\n                    label=\"Confirm New Password\"\r\n                    onChange={this.handleChange}\r\n                    type=\"password\"\r\n                  />\r\n                </React.Fragment>\r\n              )}\r\n\r\n              <SwitchToogle\r\n                onChange={e => this.toogleCheckBox(e)}\r\n                status={status}\r\n                title=\"Status\"\r\n              />\r\n              <div className=\"button-group\">\r\n                {!editMode && (\r\n                  <React.Fragment>\r\n                    <button type=\"submit\" className=\"form-button\">\r\n                      Add\r\n                    </button>\r\n                    <button\r\n                      onClick={this.handleClearState}\r\n                      className=\"form-button\"\r\n                    >\r\n                      Clear\r\n                    </button>\r\n                  </React.Fragment>\r\n                )}\r\n                {editMode && (\r\n                  <button type=\"submit\" className=\"form-button\">\r\n                    Update\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </form>\r\n          </div>\r\n        )}\r\n        {uploadMode && (\r\n          <div className=\"add_data_form\">\r\n            <span className=\"close-icon\" onClick={this.handleClose}>\r\n              &#10006;\r\n            </span>\r\n            <Uploader\r\n              uploadHandler={this.handleUpload}\r\n              cancelUpload={this.cancelUpload}\r\n              extractData={this.dataExtractor}\r\n              name={this.state.selectedFileName}\r\n              file={this.state.selectedFile}\r\n              title=\"Teachers\"\r\n            />\r\n          </div>\r\n        )}\r\n        {(addMode || editMode || uploadMode) && <Backdrop />}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MyTeachers\r\n","import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport Input from \"../common/InputField\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nclass ChangePassword extends Component {\r\n  state = {\r\n    admin: {\r\n      prevPassword: \"\",\r\n      newPassword: \"\",\r\n      confirmNewPassword: \"\"\r\n    },\r\n    updated: false\r\n  };\r\n\r\n  static contextType = AuthContext;\r\n\r\n  handleChange = ({ currentTarget: input }) => {\r\n    const admin = { ...this.state.admin };\r\n    admin[input.name] = input.value;\r\n    this.setState({ admin });\r\n  };\r\n\r\n  handleClearState = (e) => {\r\n    e.preventDefault();\r\n    const admin = { ...this.state.admin };\r\n    admin.prevPassword = \"\";\r\n    admin.newPassword = \"\";\r\n    admin.confirmNewPassword = \"\";\r\n    this.setState({ admin })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const admin = { ...this.state.admin };\r\n    let prevPassword = admin.prevPassword;\r\n    let newPassword = admin.newPassword;\r\n    let confirmNewPassword = admin.confirmNewPassword;\r\n    let adminID = this.context.userID;\r\n\r\n    if (prevPassword === \"\" || newPassword === \"\" || confirmNewPassword === \"\") {\r\n      toast.error(\"Invalid Credentials\");\r\n      return\r\n    }\r\n    if (confirmNewPassword !== newPassword) {\r\n      toast.error(\"Password Mismatch\");\r\n      return\r\n    }\r\n    const changeAdminPassword = {\r\n      query: `\r\n        mutation {\r\n          changeAdminPassword (prevPassword: \"${prevPassword}\", newPassword: \"${newPassword}\", adminID: \"${adminID}\") {\r\n            _id\r\n            name\r\n          }\r\n        }\r\n      `\r\n    };\r\n    const token = this.context.token;\r\n    fetch(\"http://localhost:4000/graphql\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(changeAdminPassword),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + token\r\n      }\r\n    })\r\n      .then(res => {\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          throw new Error(\"Failed\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(resData => {\r\n        console.log(\"UPDATED \" + resData);\r\n        toast.success(\"Password Update Successful\");\r\n        const admin = { ...this.state.admin };\r\n        admin.prevPassword = \"\";\r\n        admin.newPassword = \"\";\r\n        this.setState({ admin, updated: true });\r\n      })\r\n      .catch(err => {\r\n        toast.error(\"Something went wrong while updating\");\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { prevPassword, newPassword, confirmNewPassword } = this.state.admin;\r\n    return (\r\n      <div className=\"change_pass_container\">\r\n        <form onSubmit={this.handleSubmit} className=\"form-control\">\r\n          <Input\r\n            name=\"prevPassword\"\r\n            value={prevPassword}\r\n            label=\"Current Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <Input\r\n            name=\"newPassword\"\r\n            value={newPassword}\r\n            label=\"New Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <Input\r\n            name=\"confirmNewPassword\"\r\n            value={confirmNewPassword}\r\n            label=\"Confirm New Password\"\r\n            onChange={this.handleChange}\r\n            type=\"password\"\r\n          />\r\n          <div className=\"button-group\">\r\n            <button type=\"submit\" className=\"form-button\">\r\n              Update\r\n            </button>\r\n            <button className=\"form-button\" onClick={this.handleClearState}>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChangePassword;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nclass Sidenav extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <AuthContext.Consumer>\r\n        {(context) => {\r\n          return <div className=\"side-nav\">\r\n          <div className=\"nav-container\">\r\n            <h2 className=\"title-admin\">{context.username}</h2>\r\n            <ul>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/api/admin/myTeachers\"\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-link\"\r\n                >\r\n                  Manage Teachers\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/api/admin/change_password\"\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-link\"\r\n                >\r\n                  Change My Password\r\n                </NavLink>\r\n              </li>\r\n              <li>\r\n                <NavLink\r\n                  to=\"/\"\r\n                  className=\"nav-link\"\r\n                  onClick={context.logout}\r\n                >\r\n                  Log Out\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        }}\r\n\r\n      </AuthContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidenav;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport MyTeachers from \"./MyTeachers\";\r\nimport ChangePassword from \"./ChangePassword\";\r\nimport Sidenav from \"./Sidenav\";\r\nimport AuthContext from \"../../context/auth-context\"\r\n\r\nclass Admin extends Component {\r\n  static contextType = AuthContext;\r\n\r\n  state = {\r\n    authenticated: this.context.token ? true : false\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Sidenav />\r\n        <div className=\"content-container\">\r\n          {this.state.authenticated && <Switch>\r\n            <Route\r\n              path=\"/api/admin/change_password\"\r\n              component={ChangePassword}\r\n            />\r\n            <Route path=\"/api/admin/myTeachers\" component={MyTeachers} />\r\n          </Switch>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Admin;\r\n","import React, { Component } from \"react\"\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\"\r\nimport { ToastContainer } from \"react-toastify\"\r\nimport Navbar from \"./components/Navbar.jsx\"\r\nimport Container from \"./components/Container.jsx\"\r\nimport AdminLoginForm from \"./components/Admin/loginForm.jsx\"\r\nimport ExamRoom from \"./components/ExamRoom/ExamRoom\"\r\nimport StudentExamRoom from \"./components/ExamRoom/StudentExamRoom\"\r\nimport Teacher from \"./components/Teacher/Teacher\"\r\nimport TeacherLoginForm from \"./components/Teacher/loginForm\"\r\nimport Admin from \"./components/Admin/Admin\"\r\nimport AuthContext from \"./context/auth-context\"\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\nimport \"./App.css\"\r\n\r\nclass App extends Component {\r\n  state = {\r\n    token: localStorage.getItem(\"token\") || \"\",\r\n    userID: localStorage.getItem(\"userID\") || \"\",\r\n    username: localStorage.getItem(\"username\") || \"\",\r\n    tokenExpiration: localStorage.getItem(\"tokenExpiration\") || \"\",\r\n    accessType: localStorage.getItem(\"accessType\") || \"\",\r\n    exam_id: localStorage.getItem(\"exam_id\") || \"\",\r\n  }\r\n\r\n  login = (token, userID, username, accessType, tokenExpiration) => {\r\n    this.setState({ token, userID, username, accessType, tokenExpiration })\r\n  }\r\n\r\n  setExam = (exam_id) => {\r\n    this.setState({ exam_id })\r\n  }\r\n\r\n  logout = () => {\r\n    localStorage.clear()\r\n  }\r\n  render() {\r\n    const { token, userID, username, accessType, tokenExpiration, exam_id } = this.state\r\n    const TeacherRoute = ({ component: Component, ...rest }) => (\r\n      <Route {...rest} render={(props) => (\r\n        (token && Number(accessType) === 2)\r\n          ? <Component {...props} />\r\n          : <Redirect to='/' />\r\n      )} />\r\n    )\r\n    const StudentRoute = ({ component: Component, ...rest }) => (\r\n      <Route {...rest} render={(props) => (\r\n        (token && Number(accessType) === 3)\r\n          ? <Component {...props} />\r\n          : <Redirect to='/' />\r\n      )} />\r\n    )\r\n    const AdminRoute = ({ component: Component, ...rest }) => (\r\n      <Route {...rest} render={(props) => (\r\n        (token && Number(accessType) === 1)\r\n          ? <Component {...props} />\r\n          : <Redirect to='/' />\r\n      )} />\r\n    )\r\n\r\n\r\n    return (\r\n      <AuthContext.Provider\r\n        value={{\r\n          token,\r\n          userID,\r\n          username,\r\n          tokenExpiration,\r\n          accessType,\r\n          exam_id,\r\n          setExam: this.setExam,\r\n          login: this.login,\r\n          logout: this.logout\r\n        }}\r\n      >\r\n        <ToastContainer autoClose={2000} />\r\n        <div className=\"App\">\r\n          <Navbar />\r\n          <Switch>\r\n            <AdminRoute path=\"/api/admin\" component={Admin} />\r\n            <TeacherRoute path=\"/api/teacher\" component={Teacher} />\r\n            <TeacherRoute path=\"/api/examRoom\" component={ExamRoom} />\r\n            <StudentRoute path=\"/api/StudentExamRoom\" component={StudentExamRoom} />\r\n            <Route path=\"/api/adminLogin\" component={AdminLoginForm} />\r\n            <Route path=\"/api/teacherLogin\" component={TeacherLoginForm} />\r\n            <Route path=\"/\" exact component={Container} />\r\n          </Switch>\r\n        </div>\r\n      </AuthContext.Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(App)\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { Router } from \"react-router-dom\"\r\n\r\nimport history from \"./history.js\";\r\nimport \"./index.css\"\r\nimport App from \"./App\"\r\n\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\n\r\nReactDOM.render(\r\n  <Router history={history}>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/delete.6cf87964.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.245511e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/print.4c4bacf7.svg\";"],"sourceRoot":""}